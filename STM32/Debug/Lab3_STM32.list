
Lab3_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030cc  080030cc  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080030cc  080030cc  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030cc  080030cc  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030d0  080030d0  000130d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080030d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000058  0800312c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800312c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a694  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce4  00000000  00000000  0002a715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e9f  00000000  00000000  0002d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c27e  00000000  00000000  00044717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826f9  00000000  00000000  00050995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d308e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  000d30e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003090 	.word	0x08003090

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003090 	.word	0x08003090

0800014c <auto_run>:

#include "auto.h"


void auto_run()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(MODE == MODE1)
 8000150:	4b94      	ldr	r3, [pc, #592]	; (80003a4 <auto_run+0x258>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	f040 8122 	bne.w	800039e <auto_run+0x252>
	{
		switch(firstCoupleLedAutoState)
 800015a:	4b93      	ldr	r3, [pc, #588]	; (80003a8 <auto_run+0x25c>)
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	2b03      	cmp	r3, #3
 8000160:	d862      	bhi.n	8000228 <auto_run+0xdc>
 8000162:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <auto_run+0x1c>)
 8000164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000168:	08000179 	.word	0x08000179
 800016c:	08000187 	.word	0x08000187
 8000170:	080001bd 	.word	0x080001bd
 8000174:	080001f3 	.word	0x080001f3
		{
			case LED_INIT:
				firstCoupleLedAutoState = RED;
 8000178:	4b8b      	ldr	r3, [pc, #556]	; (80003a8 <auto_run+0x25c>)
 800017a:	2201      	movs	r2, #1
 800017c:	701a      	strb	r2, [r3, #0]
				setTimer0(100);
 800017e:	2064      	movs	r0, #100	; 0x64
 8000180:	f001 fa30 	bl	80015e4 <setTimer0>
				break;
 8000184:	e057      	b.n	8000236 <auto_run+0xea>
			case RED:
				displayFirstLedCouple(RED);
 8000186:	2001      	movs	r0, #1
 8000188:	f000 f9ce 	bl	8000528 <displayFirstLedCouple>
				if(timer0_flag == 1){
 800018c:	4b87      	ldr	r3, [pc, #540]	; (80003ac <auto_run+0x260>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d14b      	bne.n	800022c <auto_run+0xe0>
					countdownFirstCoupleLed--;
 8000194:	4b86      	ldr	r3, [pc, #536]	; (80003b0 <auto_run+0x264>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	3b01      	subs	r3, #1
 800019a:	4a85      	ldr	r2, [pc, #532]	; (80003b0 <auto_run+0x264>)
 800019c:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 800019e:	4b84      	ldr	r3, [pc, #528]	; (80003b0 <auto_run+0x264>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d106      	bne.n	80001b4 <auto_run+0x68>
						countdownFirstCoupleLed = greenDelay;
 80001a6:	4b83      	ldr	r3, [pc, #524]	; (80003b4 <auto_run+0x268>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a81      	ldr	r2, [pc, #516]	; (80003b0 <auto_run+0x264>)
 80001ac:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = GREEN;
 80001ae:	4b7e      	ldr	r3, [pc, #504]	; (80003a8 <auto_run+0x25c>)
 80001b0:	2202      	movs	r2, #2
 80001b2:	701a      	strb	r2, [r3, #0]
					}
					setTimer0(100);
 80001b4:	2064      	movs	r0, #100	; 0x64
 80001b6:	f001 fa15 	bl	80015e4 <setTimer0>
				}
				break;
 80001ba:	e037      	b.n	800022c <auto_run+0xe0>
			case GREEN:
				displayFirstLedCouple(GREEN);
 80001bc:	2002      	movs	r0, #2
 80001be:	f000 f9b3 	bl	8000528 <displayFirstLedCouple>
				if(timer0_flag == 1){
 80001c2:	4b7a      	ldr	r3, [pc, #488]	; (80003ac <auto_run+0x260>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b01      	cmp	r3, #1
 80001c8:	d132      	bne.n	8000230 <auto_run+0xe4>
					countdownFirstCoupleLed--;
 80001ca:	4b79      	ldr	r3, [pc, #484]	; (80003b0 <auto_run+0x264>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	4a77      	ldr	r2, [pc, #476]	; (80003b0 <auto_run+0x264>)
 80001d2:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 80001d4:	4b76      	ldr	r3, [pc, #472]	; (80003b0 <auto_run+0x264>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d106      	bne.n	80001ea <auto_run+0x9e>
						countdownFirstCoupleLed = yellowDelay;
 80001dc:	4b76      	ldr	r3, [pc, #472]	; (80003b8 <auto_run+0x26c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a73      	ldr	r2, [pc, #460]	; (80003b0 <auto_run+0x264>)
 80001e2:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = YELLOW;
 80001e4:	4b70      	ldr	r3, [pc, #448]	; (80003a8 <auto_run+0x25c>)
 80001e6:	2203      	movs	r2, #3
 80001e8:	701a      	strb	r2, [r3, #0]
					}
					setTimer0(100);
 80001ea:	2064      	movs	r0, #100	; 0x64
 80001ec:	f001 f9fa 	bl	80015e4 <setTimer0>
				}
				break;
 80001f0:	e01e      	b.n	8000230 <auto_run+0xe4>
			case YELLOW:
				displayFirstLedCouple(YELLOW);
 80001f2:	2003      	movs	r0, #3
 80001f4:	f000 f998 	bl	8000528 <displayFirstLedCouple>
				if(timer0_flag == 1){
 80001f8:	4b6c      	ldr	r3, [pc, #432]	; (80003ac <auto_run+0x260>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d119      	bne.n	8000234 <auto_run+0xe8>
					countdownFirstCoupleLed--;
 8000200:	4b6b      	ldr	r3, [pc, #428]	; (80003b0 <auto_run+0x264>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	4a6a      	ldr	r2, [pc, #424]	; (80003b0 <auto_run+0x264>)
 8000208:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 800020a:	4b69      	ldr	r3, [pc, #420]	; (80003b0 <auto_run+0x264>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d106      	bne.n	8000220 <auto_run+0xd4>
						countdownFirstCoupleLed = redDelay;
 8000212:	4b6a      	ldr	r3, [pc, #424]	; (80003bc <auto_run+0x270>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a66      	ldr	r2, [pc, #408]	; (80003b0 <auto_run+0x264>)
 8000218:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = RED;
 800021a:	4b63      	ldr	r3, [pc, #396]	; (80003a8 <auto_run+0x25c>)
 800021c:	2201      	movs	r2, #1
 800021e:	701a      	strb	r2, [r3, #0]
					}
					setTimer0(100);
 8000220:	2064      	movs	r0, #100	; 0x64
 8000222:	f001 f9df 	bl	80015e4 <setTimer0>
				}
				break;
 8000226:	e005      	b.n	8000234 <auto_run+0xe8>
			default:
				break;
 8000228:	bf00      	nop
 800022a:	e004      	b.n	8000236 <auto_run+0xea>
				break;
 800022c:	bf00      	nop
 800022e:	e002      	b.n	8000236 <auto_run+0xea>
				break;
 8000230:	bf00      	nop
 8000232:	e000      	b.n	8000236 <auto_run+0xea>
				break;
 8000234:	bf00      	nop
		}
		switch(secondCoupleLedAutoState){
 8000236:	4b62      	ldr	r3, [pc, #392]	; (80003c0 <auto_run+0x274>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d862      	bhi.n	8000304 <auto_run+0x1b8>
 800023e:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <auto_run+0xf8>)
 8000240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000244:	08000255 	.word	0x08000255
 8000248:	08000263 	.word	0x08000263
 800024c:	08000299 	.word	0x08000299
 8000250:	080002cf 	.word	0x080002cf
			case LED_INIT:
				secondCoupleLedAutoState = GREEN;
 8000254:	4b5a      	ldr	r3, [pc, #360]	; (80003c0 <auto_run+0x274>)
 8000256:	2202      	movs	r2, #2
 8000258:	701a      	strb	r2, [r3, #0]
				setTimer1(100);
 800025a:	2064      	movs	r0, #100	; 0x64
 800025c:	f001 f9d6 	bl	800160c <setTimer1>
				break;
 8000260:	e057      	b.n	8000312 <auto_run+0x1c6>
			case RED:
				displaySecondLedCouple(RED);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 f9bc 	bl	80005e0 <displaySecondLedCouple>
				if(timer1_flag == 1){
 8000268:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <auto_run+0x278>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d14b      	bne.n	8000308 <auto_run+0x1bc>
					countdownSecondCoupleLed--;
 8000270:	4b55      	ldr	r3, [pc, #340]	; (80003c8 <auto_run+0x27c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a54      	ldr	r2, [pc, #336]	; (80003c8 <auto_run+0x27c>)
 8000278:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 800027a:	4b53      	ldr	r3, [pc, #332]	; (80003c8 <auto_run+0x27c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d106      	bne.n	8000290 <auto_run+0x144>
						countdownSecondCoupleLed = greenDelay;
 8000282:	4b4c      	ldr	r3, [pc, #304]	; (80003b4 <auto_run+0x268>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a50      	ldr	r2, [pc, #320]	; (80003c8 <auto_run+0x27c>)
 8000288:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = GREEN;
 800028a:	4b4d      	ldr	r3, [pc, #308]	; (80003c0 <auto_run+0x274>)
 800028c:	2202      	movs	r2, #2
 800028e:	701a      	strb	r2, [r3, #0]
					}
					setTimer1(100);
 8000290:	2064      	movs	r0, #100	; 0x64
 8000292:	f001 f9bb 	bl	800160c <setTimer1>
				}
				break;
 8000296:	e037      	b.n	8000308 <auto_run+0x1bc>
			case GREEN:
				displaySecondLedCouple(GREEN);
 8000298:	2002      	movs	r0, #2
 800029a:	f000 f9a1 	bl	80005e0 <displaySecondLedCouple>
				if(timer1_flag == 1){
 800029e:	4b49      	ldr	r3, [pc, #292]	; (80003c4 <auto_run+0x278>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d132      	bne.n	800030c <auto_run+0x1c0>
					countdownSecondCoupleLed--;
 80002a6:	4b48      	ldr	r3, [pc, #288]	; (80003c8 <auto_run+0x27c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	4a46      	ldr	r2, [pc, #280]	; (80003c8 <auto_run+0x27c>)
 80002ae:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 80002b0:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <auto_run+0x27c>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <auto_run+0x17a>
						countdownSecondCoupleLed = yellowDelay;
 80002b8:	4b3f      	ldr	r3, [pc, #252]	; (80003b8 <auto_run+0x26c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a42      	ldr	r2, [pc, #264]	; (80003c8 <auto_run+0x27c>)
 80002be:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = YELLOW;
 80002c0:	4b3f      	ldr	r3, [pc, #252]	; (80003c0 <auto_run+0x274>)
 80002c2:	2203      	movs	r2, #3
 80002c4:	701a      	strb	r2, [r3, #0]
					}
					setTimer1(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f001 f9a0 	bl	800160c <setTimer1>
				}
				break;
 80002cc:	e01e      	b.n	800030c <auto_run+0x1c0>
			case YELLOW:
				displaySecondLedCouple(YELLOW);
 80002ce:	2003      	movs	r0, #3
 80002d0:	f000 f986 	bl	80005e0 <displaySecondLedCouple>
				if(timer1_flag == 1){
 80002d4:	4b3b      	ldr	r3, [pc, #236]	; (80003c4 <auto_run+0x278>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d119      	bne.n	8000310 <auto_run+0x1c4>
					countdownSecondCoupleLed--;
 80002dc:	4b3a      	ldr	r3, [pc, #232]	; (80003c8 <auto_run+0x27c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a39      	ldr	r2, [pc, #228]	; (80003c8 <auto_run+0x27c>)
 80002e4:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 80002e6:	4b38      	ldr	r3, [pc, #224]	; (80003c8 <auto_run+0x27c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d106      	bne.n	80002fc <auto_run+0x1b0>
						countdownSecondCoupleLed = redDelay;
 80002ee:	4b33      	ldr	r3, [pc, #204]	; (80003bc <auto_run+0x270>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <auto_run+0x27c>)
 80002f4:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = RED;
 80002f6:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <auto_run+0x274>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
					}
					setTimer1(100);
 80002fc:	2064      	movs	r0, #100	; 0x64
 80002fe:	f001 f985 	bl	800160c <setTimer1>
				}
				break;
 8000302:	e005      	b.n	8000310 <auto_run+0x1c4>
			default:
				break;
 8000304:	bf00      	nop
 8000306:	e004      	b.n	8000312 <auto_run+0x1c6>
				break;
 8000308:	bf00      	nop
 800030a:	e002      	b.n	8000312 <auto_run+0x1c6>
				break;
 800030c:	bf00      	nop
 800030e:	e000      	b.n	8000312 <auto_run+0x1c6>
				break;
 8000310:	bf00      	nop
		}

		switch(seg7AutoState){
 8000312:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <auto_run+0x280>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b02      	cmp	r3, #2
 8000318:	d020      	beq.n	800035c <auto_run+0x210>
 800031a:	2b02      	cmp	r3, #2
 800031c:	dc31      	bgt.n	8000382 <auto_run+0x236>
 800031e:	2b00      	cmp	r3, #0
 8000320:	d002      	beq.n	8000328 <auto_run+0x1dc>
 8000322:	2b01      	cmp	r3, #1
 8000324:	d007      	beq.n	8000336 <auto_run+0x1ea>
					seg7AutoState = FIRST;
					setTimer2(50);
				}
				break;
			default:
				break;
 8000326:	e02c      	b.n	8000382 <auto_run+0x236>
				seg7AutoState = FIRST;
 8000328:	4b28      	ldr	r3, [pc, #160]	; (80003cc <auto_run+0x280>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
				setTimer2(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f001 f980 	bl	8001634 <setTimer2>
				break;
 8000334:	e02a      	b.n	800038c <auto_run+0x240>
				if(timer2_flag == 1){
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <auto_run+0x284>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d123      	bne.n	8000386 <auto_run+0x23a>
					showTimeDelay_First(countdownFirstCoupleLed, countdownSecondCoupleLed);
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <auto_run+0x264>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a21      	ldr	r2, [pc, #132]	; (80003c8 <auto_run+0x27c>)
 8000344:	6812      	ldr	r2, [r2, #0]
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fd83 	bl	8000e54 <showTimeDelay_First>
					seg7AutoState = SECOND;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <auto_run+0x280>)
 8000350:	2202      	movs	r2, #2
 8000352:	701a      	strb	r2, [r3, #0]
					setTimer2(50);
 8000354:	2032      	movs	r0, #50	; 0x32
 8000356:	f001 f96d 	bl	8001634 <setTimer2>
				break;
 800035a:	e014      	b.n	8000386 <auto_run+0x23a>
				if(timer2_flag == 1){
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <auto_run+0x284>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d112      	bne.n	800038a <auto_run+0x23e>
					showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <auto_run+0x264>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a17      	ldr	r2, [pc, #92]	; (80003c8 <auto_run+0x27c>)
 800036a:	6812      	ldr	r2, [r2, #0]
 800036c:	4611      	mov	r1, r2
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fd94 	bl	8000e9c <showTimeDelay_Second>
					seg7AutoState = FIRST;
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <auto_run+0x280>)
 8000376:	2201      	movs	r2, #1
 8000378:	701a      	strb	r2, [r3, #0]
					setTimer2(50);
 800037a:	2032      	movs	r0, #50	; 0x32
 800037c:	f001 f95a 	bl	8001634 <setTimer2>
				break;
 8000380:	e003      	b.n	800038a <auto_run+0x23e>
				break;
 8000382:	bf00      	nop
 8000384:	e002      	b.n	800038c <auto_run+0x240>
				break;
 8000386:	bf00      	nop
 8000388:	e000      	b.n	800038c <auto_run+0x240>
				break;
 800038a:	bf00      	nop
		}

			if (isButtonPressed(0) == 1 ){
 800038c:	2000      	movs	r0, #0
 800038e:	f000 f821 	bl	80003d4 <isButtonPressed>
 8000392:	4603      	mov	r3, r0
 8000394:	2b01      	cmp	r3, #1
 8000396:	d102      	bne.n	800039e <auto_run+0x252>
					MODE = MODE2;
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <auto_run+0x258>)
 800039a:	2202      	movs	r2, #2
 800039c:	701a      	strb	r2, [r3, #0]
				}
	}
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000cb 	.word	0x200000cb
 80003a8:	200000d1 	.word	0x200000d1
 80003ac:	20000080 	.word	0x20000080
 80003b0:	200000dc 	.word	0x200000dc
 80003b4:	20000044 	.word	0x20000044
 80003b8:	20000048 	.word	0x20000048
 80003bc:	20000040 	.word	0x20000040
 80003c0:	200000cf 	.word	0x200000cf
 80003c4:	20000084 	.word	0x20000084
 80003c8:	200000d4 	.word	0x200000d4
 80003cc:	200000d9 	.word	0x200000d9
 80003d0:	20000088 	.word	0x20000088

080003d4 <isButtonPressed>:
int KeyReg3[BUTTONS_NUMBER] = {NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};

int isButtonPressed(int i){
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <isButtonPressed+0x30>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d106      	bne.n	80003f6 <isButtonPressed+0x22>
		button_flag[i] = 0;
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <isButtonPressed+0x30>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2100      	movs	r1, #0
 80003ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	e000      	b.n	80003f8 <isButtonPressed+0x24>
	}
	return 0;
 80003f6:	2300      	movs	r3, #0

}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	20000074 	.word	0x20000074

08000408 <subKeyProcess>:

void subKeyProcess(int i){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <subKeyProcess+0x1c>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2101      	movs	r1, #1
 8000416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	20000074 	.word	0x20000074

08000428 <getKeyInput>:

void getKeyInput()
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	for(int i=0; i<BUTTONS_NUMBER; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e063      	b.n	80004fc <getKeyInput+0xd4>
	{
		  KeyReg2[i] = KeyReg1[i];
 8000434:	4a35      	ldr	r2, [pc, #212]	; (800050c <getKeyInput+0xe4>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	4934      	ldr	r1, [pc, #208]	; (8000510 <getKeyInput+0xe8>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg1[i] = KeyReg0[i];
 8000444:	4a33      	ldr	r2, [pc, #204]	; (8000514 <getKeyInput+0xec>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800044c:	492f      	ldr	r1, [pc, #188]	; (800050c <getKeyInput+0xe4>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, buttonsArr[i]);
 8000454:	4a30      	ldr	r2, [pc, #192]	; (8000518 <getKeyInput+0xf0>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045c:	b29b      	uxth	r3, r3
 800045e:	4619      	mov	r1, r3
 8000460:	482e      	ldr	r0, [pc, #184]	; (800051c <getKeyInput+0xf4>)
 8000462:	f001 fddd 	bl	8002020 <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
 8000468:	4619      	mov	r1, r3
 800046a:	4a2a      	ldr	r2, [pc, #168]	; (8000514 <getKeyInput+0xec>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000472:	4a26      	ldr	r2, [pc, #152]	; (800050c <getKeyInput+0xe4>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4926      	ldr	r1, [pc, #152]	; (8000514 <getKeyInput+0xec>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d137      	bne.n	80004f6 <getKeyInput+0xce>
 8000486:	4a21      	ldr	r2, [pc, #132]	; (800050c <getKeyInput+0xe4>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	4920      	ldr	r1, [pc, #128]	; (8000510 <getKeyInput+0xe8>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d12d      	bne.n	80004f6 <getKeyInput+0xce>
			if (KeyReg2[i] != KeyReg3[i]){
 800049a:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <getKeyInput+0xe8>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	491f      	ldr	r1, [pc, #124]	; (8000520 <getKeyInput+0xf8>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d015      	beq.n	80004da <getKeyInput+0xb2>
			  KeyReg3[i] = KeyReg2[i];
 80004ae:	4a18      	ldr	r2, [pc, #96]	; (8000510 <getKeyInput+0xe8>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004b6:	491a      	ldr	r1, [pc, #104]	; (8000520 <getKeyInput+0xf8>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg3[i] == PRESSED_STATE){
 80004be:	4a18      	ldr	r2, [pc, #96]	; (8000520 <getKeyInput+0xf8>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d115      	bne.n	80004f6 <getKeyInput+0xce>
				TimeOutForKeyPress = 500;
 80004ca:	4b16      	ldr	r3, [pc, #88]	; (8000524 <getKeyInput+0xfc>)
 80004cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004d0:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff ff98 	bl	8000408 <subKeyProcess>
 80004d8:	e00d      	b.n	80004f6 <getKeyInput+0xce>
			  }
			}else{
			   TimeOutForKeyPress --;
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <getKeyInput+0xfc>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	4a10      	ldr	r2, [pc, #64]	; (8000524 <getKeyInput+0xfc>)
 80004e2:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0){
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <getKeyInput+0xfc>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d104      	bne.n	80004f6 <getKeyInput+0xce>
				  KeyReg3[i] = NORMAL_STATE;
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <getKeyInput+0xf8>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2101      	movs	r1, #1
 80004f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i<BUTTONS_NUMBER; i++)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b02      	cmp	r3, #2
 8000500:	dd98      	ble.n	8000434 <getKeyInput+0xc>
				}
			}
		  }
	}
}
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000018 	.word	0x20000018
 8000510:	20000024 	.word	0x20000024
 8000514:	2000000c 	.word	0x2000000c
 8000518:	20000000 	.word	0x20000000
 800051c:	40010800 	.word	0x40010800
 8000520:	20000030 	.word	0x20000030
 8000524:	2000003c 	.word	0x2000003c

08000528 <displayFirstLedCouple>:
 */

#include "display_led.h"


void displayFirstLedCouple(enum LedState state_1){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d84b      	bhi.n	80005d0 <displayFirstLedCouple+0xa8>
 8000538:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <displayFirstLedCouple+0x18>)
 800053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053e:	bf00      	nop
 8000540:	08000551 	.word	0x08000551
 8000544:	08000571 	.word	0x08000571
 8000548:	080005b1 	.word	0x080005b1
 800054c:	08000591 	.word	0x08000591
	 case LED_INIT:
			 HAL_GPIO_WritePin( FIRST_COUPLE_GREEN_GPIO_Port , FIRST_COUPLE_GREEN_Pin , 1) ;
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4821      	ldr	r0, [pc, #132]	; (80005dc <displayFirstLedCouple+0xb4>)
 8000556:	f001 fd7a 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_YELLOW_GPIO_Port , FIRST_COUPLE_YELLOW_Pin , 1 ) ;
 800055a:	2201      	movs	r2, #1
 800055c:	2108      	movs	r1, #8
 800055e:	481f      	ldr	r0, [pc, #124]	; (80005dc <displayFirstLedCouple+0xb4>)
 8000560:	f001 fd75 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_RED_GPIO_Port , FIRST_COUPLE_RED_Pin , 1 ) ;
 8000564:	2201      	movs	r2, #1
 8000566:	2104      	movs	r1, #4
 8000568:	481c      	ldr	r0, [pc, #112]	; (80005dc <displayFirstLedCouple+0xb4>)
 800056a:	f001 fd70 	bl	800204e <HAL_GPIO_WritePin>
			 break;
 800056e:	e030      	b.n	80005d2 <displayFirstLedCouple+0xaa>
	 case RED:
			 HAL_GPIO_WritePin( FIRST_COUPLE_GREEN_GPIO_Port , FIRST_COUPLE_GREEN_Pin , 1) ;
 8000570:	2201      	movs	r2, #1
 8000572:	2110      	movs	r1, #16
 8000574:	4819      	ldr	r0, [pc, #100]	; (80005dc <displayFirstLedCouple+0xb4>)
 8000576:	f001 fd6a 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_YELLOW_GPIO_Port , FIRST_COUPLE_YELLOW_Pin , 1 ) ;
 800057a:	2201      	movs	r2, #1
 800057c:	2108      	movs	r1, #8
 800057e:	4817      	ldr	r0, [pc, #92]	; (80005dc <displayFirstLedCouple+0xb4>)
 8000580:	f001 fd65 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_RED_GPIO_Port , FIRST_COUPLE_RED_Pin , 0 ) ;
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	4814      	ldr	r0, [pc, #80]	; (80005dc <displayFirstLedCouple+0xb4>)
 800058a:	f001 fd60 	bl	800204e <HAL_GPIO_WritePin>
			 break;
 800058e:	e020      	b.n	80005d2 <displayFirstLedCouple+0xaa>
	 case YELLOW:
			 HAL_GPIO_WritePin( FIRST_COUPLE_GREEN_GPIO_Port , FIRST_COUPLE_GREEN_Pin , 1) ;
 8000590:	2201      	movs	r2, #1
 8000592:	2110      	movs	r1, #16
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <displayFirstLedCouple+0xb4>)
 8000596:	f001 fd5a 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_YELLOW_GPIO_Port , FIRST_COUPLE_YELLOW_Pin , 0 ) ;
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <displayFirstLedCouple+0xb4>)
 80005a0:	f001 fd55 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_RED_GPIO_Port , FIRST_COUPLE_RED_Pin , 1 ) ;
 80005a4:	2201      	movs	r2, #1
 80005a6:	2104      	movs	r1, #4
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <displayFirstLedCouple+0xb4>)
 80005aa:	f001 fd50 	bl	800204e <HAL_GPIO_WritePin>
			 break;
 80005ae:	e010      	b.n	80005d2 <displayFirstLedCouple+0xaa>
	 case GREEN:
			 HAL_GPIO_WritePin( FIRST_COUPLE_GREEN_GPIO_Port , FIRST_COUPLE_GREEN_Pin , 0) ;
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <displayFirstLedCouple+0xb4>)
 80005b6:	f001 fd4a 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_YELLOW_GPIO_Port , FIRST_COUPLE_YELLOW_Pin , 1 ) ;
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <displayFirstLedCouple+0xb4>)
 80005c0:	f001 fd45 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( FIRST_COUPLE_RED_GPIO_Port , FIRST_COUPLE_RED_Pin , 1 ) ;
 80005c4:	2201      	movs	r2, #1
 80005c6:	2104      	movs	r1, #4
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <displayFirstLedCouple+0xb4>)
 80005ca:	f001 fd40 	bl	800204e <HAL_GPIO_WritePin>
			 break;
 80005ce:	e000      	b.n	80005d2 <displayFirstLedCouple+0xaa>
	 default:
		 break;
 80005d0:	bf00      	nop
	}
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010800 	.word	0x40010800

080005e0 <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d84b      	bhi.n	8000688 <displaySecondLedCouple+0xa8>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <displaySecondLedCouple+0x18>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000609 	.word	0x08000609
 80005fc:	08000629 	.word	0x08000629
 8000600:	08000669 	.word	0x08000669
 8000604:	08000649 	.word	0x08000649
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( SECOND_COUPLE_GREEN_GPIO_Port , SECOND_COUPLE_GREEN_Pin , 1) ;
 8000608:	2201      	movs	r2, #1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4821      	ldr	r0, [pc, #132]	; (8000694 <displaySecondLedCouple+0xb4>)
 800060e:	f001 fd1e 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( SECOND_COUPLE_YELLOW_GPIO_Port , SECOND_COUPLE_YELLOW_Pin , 1 ) ;
 8000612:	2201      	movs	r2, #1
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	481f      	ldr	r0, [pc, #124]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000618:	f001 fd19 	bl	800204e <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( SECOND_COUPLE_RED_GPIO_Port , SECOND_COUPLE_RED_Pin , 1 ) ;
 800061c:	2201      	movs	r2, #1
 800061e:	2120      	movs	r1, #32
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000622:	f001 fd14 	bl	800204e <HAL_GPIO_WritePin>
			 break;
 8000626:	e030      	b.n	800068a <displaySecondLedCouple+0xaa>
		case RED:
			HAL_GPIO_WritePin( SECOND_COUPLE_GREEN_GPIO_Port , SECOND_COUPLE_GREEN_Pin , 1) ;
 8000628:	2201      	movs	r2, #1
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <displaySecondLedCouple+0xb4>)
 800062e:	f001 fd0e 	bl	800204e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( SECOND_COUPLE_YELLOW_GPIO_Port , SECOND_COUPLE_YELLOW_Pin , 1 ) ;
 8000632:	2201      	movs	r2, #1
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4817      	ldr	r0, [pc, #92]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000638:	f001 fd09 	bl	800204e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( SECOND_COUPLE_RED_GPIO_Port , SECOND_COUPLE_RED_Pin , 0 ) ;
 800063c:	2200      	movs	r2, #0
 800063e:	2120      	movs	r1, #32
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000642:	f001 fd04 	bl	800204e <HAL_GPIO_WritePin>
			break;
 8000646:	e020      	b.n	800068a <displaySecondLedCouple+0xaa>
		case YELLOW:
			HAL_GPIO_WritePin( SECOND_COUPLE_GREEN_GPIO_Port , SECOND_COUPLE_GREEN_Pin , 1) ;
 8000648:	2201      	movs	r2, #1
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <displaySecondLedCouple+0xb4>)
 800064e:	f001 fcfe 	bl	800204e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( SECOND_COUPLE_YELLOW_GPIO_Port , SECOND_COUPLE_YELLOW_Pin , 0 ) ;
 8000652:	2200      	movs	r2, #0
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	480f      	ldr	r0, [pc, #60]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000658:	f001 fcf9 	bl	800204e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( SECOND_COUPLE_RED_GPIO_Port , SECOND_COUPLE_RED_Pin , 1 ) ;
 800065c:	2201      	movs	r2, #1
 800065e:	2120      	movs	r1, #32
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000662:	f001 fcf4 	bl	800204e <HAL_GPIO_WritePin>
			break;
 8000666:	e010      	b.n	800068a <displaySecondLedCouple+0xaa>
		case GREEN:
			HAL_GPIO_WritePin( SECOND_COUPLE_GREEN_GPIO_Port , SECOND_COUPLE_GREEN_Pin , 0) ;
 8000668:	2200      	movs	r2, #0
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <displaySecondLedCouple+0xb4>)
 800066e:	f001 fcee 	bl	800204e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( SECOND_COUPLE_YELLOW_GPIO_Port , SECOND_COUPLE_YELLOW_Pin , 1 ) ;
 8000672:	2201      	movs	r2, #1
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000678:	f001 fce9 	bl	800204e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( SECOND_COUPLE_RED_GPIO_Port , SECOND_COUPLE_RED_Pin , 1 ) ;
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <displaySecondLedCouple+0xb4>)
 8000682:	f001 fce4 	bl	800204e <HAL_GPIO_WritePin>
			break;
 8000686:	e000      	b.n	800068a <displaySecondLedCouple+0xaa>
		default:
		  break;
 8000688:	bf00      	nop
   }
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010800 	.word	0x40010800

08000698 <toggleLeds>:

void toggleLeds(enum LedState state){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	switch(state){
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d00e      	beq.n	80006c6 <toggleLeds+0x2e>
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	dc1e      	bgt.n	80006ea <toggleLeds+0x52>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d013      	beq.n	80006d8 <toggleLeds+0x40>
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d11a      	bne.n	80006ea <toggleLeds+0x52>
	 case GREEN:
			 HAL_GPIO_TogglePin( FIRST_COUPLE_GREEN_GPIO_Port , FIRST_COUPLE_GREEN_Pin) ;
 80006b4:	2110      	movs	r1, #16
 80006b6:	480f      	ldr	r0, [pc, #60]	; (80006f4 <toggleLeds+0x5c>)
 80006b8:	f001 fce1 	bl	800207e <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( SECOND_COUPLE_GREEN_GPIO_Port , SECOND_COUPLE_GREEN_Pin) ;
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <toggleLeds+0x5c>)
 80006c0:	f001 fcdd 	bl	800207e <HAL_GPIO_TogglePin>
			 break;
 80006c4:	e012      	b.n	80006ec <toggleLeds+0x54>
	 case YELLOW:
			 HAL_GPIO_TogglePin( FIRST_COUPLE_YELLOW_GPIO_Port , FIRST_COUPLE_YELLOW_Pin) ;
 80006c6:	2108      	movs	r1, #8
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <toggleLeds+0x5c>)
 80006ca:	f001 fcd8 	bl	800207e <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( SECOND_COUPLE_YELLOW_GPIO_Port , SECOND_COUPLE_YELLOW_Pin) ;
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <toggleLeds+0x5c>)
 80006d2:	f001 fcd4 	bl	800207e <HAL_GPIO_TogglePin>
			 break;
 80006d6:	e009      	b.n	80006ec <toggleLeds+0x54>
	 case RED:
			 HAL_GPIO_TogglePin( FIRST_COUPLE_RED_GPIO_Port , FIRST_COUPLE_RED_Pin) ;
 80006d8:	2104      	movs	r1, #4
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <toggleLeds+0x5c>)
 80006dc:	f001 fccf 	bl	800207e <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( SECOND_COUPLE_RED_GPIO_Port , SECOND_COUPLE_RED_Pin) ;
 80006e0:	2120      	movs	r1, #32
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <toggleLeds+0x5c>)
 80006e4:	f001 fccb 	bl	800207e <HAL_GPIO_TogglePin>
			 break;
 80006e8:	e000      	b.n	80006ec <toggleLeds+0x54>
	 default:
		 break;
 80006ea:	bf00      	nop
	}
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40010800 	.word	0x40010800

080006f8 <displaySEG7_1>:


void displaySEG7_1(int num){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b09      	cmp	r3, #9
 8000704:	f200 8180 	bhi.w	8000a08 <displaySEG7_1+0x310>
 8000708:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <displaySEG7_1+0x18>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000739 	.word	0x08000739
 8000714:	08000781 	.word	0x08000781
 8000718:	080007c9 	.word	0x080007c9
 800071c:	08000811 	.word	0x08000811
 8000720:	08000859 	.word	0x08000859
 8000724:	080008a1 	.word	0x080008a1
 8000728:	080008e9 	.word	0x080008e9
 800072c:	08000931 	.word	0x08000931
 8000730:	08000979 	.word	0x08000979
 8000734:	080009c1 	.word	0x080009c1
  switch(num){
    case 0:
          HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	48b5      	ldr	r0, [pc, #724]	; (8000a14 <displaySEG7_1+0x31c>)
 800073e:	f001 fc86 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	48b3      	ldr	r0, [pc, #716]	; (8000a14 <displaySEG7_1+0x31c>)
 8000748:	f001 fc81 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	48b0      	ldr	r0, [pc, #704]	; (8000a14 <displaySEG7_1+0x31c>)
 8000752:	f001 fc7c 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	48ae      	ldr	r0, [pc, #696]	; (8000a14 <displaySEG7_1+0x31c>)
 800075c:	f001 fc77 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000760:	2200      	movs	r2, #0
 8000762:	2110      	movs	r1, #16
 8000764:	48ab      	ldr	r0, [pc, #684]	; (8000a14 <displaySEG7_1+0x31c>)
 8000766:	f001 fc72 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	48a9      	ldr	r0, [pc, #676]	; (8000a14 <displaySEG7_1+0x31c>)
 8000770:	f001 fc6d 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	48a6      	ldr	r0, [pc, #664]	; (8000a14 <displaySEG7_1+0x31c>)
 800077a:	f001 fc68 	bl	800204e <HAL_GPIO_WritePin>
        break;
 800077e:	e144      	b.n	8000a0a <displaySEG7_1+0x312>

    case 1:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 8000780:	2201      	movs	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	48a3      	ldr	r0, [pc, #652]	; (8000a14 <displaySEG7_1+0x31c>)
 8000786:	f001 fc62 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	48a1      	ldr	r0, [pc, #644]	; (8000a14 <displaySEG7_1+0x31c>)
 8000790:	f001 fc5d 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000794:	2200      	movs	r2, #0
 8000796:	2104      	movs	r1, #4
 8000798:	489e      	ldr	r0, [pc, #632]	; (8000a14 <displaySEG7_1+0x31c>)
 800079a:	f001 fc58 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 800079e:	2201      	movs	r2, #1
 80007a0:	2108      	movs	r1, #8
 80007a2:	489c      	ldr	r0, [pc, #624]	; (8000a14 <displaySEG7_1+0x31c>)
 80007a4:	f001 fc53 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	4899      	ldr	r0, [pc, #612]	; (8000a14 <displaySEG7_1+0x31c>)
 80007ae:	f001 fc4e 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	4897      	ldr	r0, [pc, #604]	; (8000a14 <displaySEG7_1+0x31c>)
 80007b8:	f001 fc49 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 80007bc:	2201      	movs	r2, #1
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	4894      	ldr	r0, [pc, #592]	; (8000a14 <displaySEG7_1+0x31c>)
 80007c2:	f001 fc44 	bl	800204e <HAL_GPIO_WritePin>
        break;
 80007c6:	e120      	b.n	8000a0a <displaySEG7_1+0x312>

    case 2:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	4891      	ldr	r0, [pc, #580]	; (8000a14 <displaySEG7_1+0x31c>)
 80007ce:	f001 fc3e 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	488f      	ldr	r0, [pc, #572]	; (8000a14 <displaySEG7_1+0x31c>)
 80007d8:	f001 fc39 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 1 ) ;
 80007dc:	2201      	movs	r2, #1
 80007de:	2104      	movs	r1, #4
 80007e0:	488c      	ldr	r0, [pc, #560]	; (8000a14 <displaySEG7_1+0x31c>)
 80007e2:	f001 fc34 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	488a      	ldr	r0, [pc, #552]	; (8000a14 <displaySEG7_1+0x31c>)
 80007ec:	f001 fc2f 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80007f0:	2200      	movs	r2, #0
 80007f2:	2110      	movs	r1, #16
 80007f4:	4887      	ldr	r0, [pc, #540]	; (8000a14 <displaySEG7_1+0x31c>)
 80007f6:	f001 fc2a 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80007fa:	2201      	movs	r2, #1
 80007fc:	2120      	movs	r1, #32
 80007fe:	4885      	ldr	r0, [pc, #532]	; (8000a14 <displaySEG7_1+0x31c>)
 8000800:	f001 fc25 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000804:	2200      	movs	r2, #0
 8000806:	2140      	movs	r1, #64	; 0x40
 8000808:	4882      	ldr	r0, [pc, #520]	; (8000a14 <displaySEG7_1+0x31c>)
 800080a:	f001 fc20 	bl	800204e <HAL_GPIO_WritePin>
        break;
 800080e:	e0fc      	b.n	8000a0a <displaySEG7_1+0x312>

    case 3:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000810:	2200      	movs	r2, #0
 8000812:	2101      	movs	r1, #1
 8000814:	487f      	ldr	r0, [pc, #508]	; (8000a14 <displaySEG7_1+0x31c>)
 8000816:	f001 fc1a 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800081a:	2200      	movs	r2, #0
 800081c:	2102      	movs	r1, #2
 800081e:	487d      	ldr	r0, [pc, #500]	; (8000a14 <displaySEG7_1+0x31c>)
 8000820:	f001 fc15 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000824:	2200      	movs	r2, #0
 8000826:	2104      	movs	r1, #4
 8000828:	487a      	ldr	r0, [pc, #488]	; (8000a14 <displaySEG7_1+0x31c>)
 800082a:	f001 fc10 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	4878      	ldr	r0, [pc, #480]	; (8000a14 <displaySEG7_1+0x31c>)
 8000834:	f001 fc0b 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000838:	2201      	movs	r2, #1
 800083a:	2110      	movs	r1, #16
 800083c:	4875      	ldr	r0, [pc, #468]	; (8000a14 <displaySEG7_1+0x31c>)
 800083e:	f001 fc06 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000842:	2201      	movs	r2, #1
 8000844:	2120      	movs	r1, #32
 8000846:	4873      	ldr	r0, [pc, #460]	; (8000a14 <displaySEG7_1+0x31c>)
 8000848:	f001 fc01 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800084c:	2200      	movs	r2, #0
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	4870      	ldr	r0, [pc, #448]	; (8000a14 <displaySEG7_1+0x31c>)
 8000852:	f001 fbfc 	bl	800204e <HAL_GPIO_WritePin>
        break;
 8000856:	e0d8      	b.n	8000a0a <displaySEG7_1+0x312>

    case 4:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	486d      	ldr	r0, [pc, #436]	; (8000a14 <displaySEG7_1+0x31c>)
 800085e:	f001 fbf6 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	486b      	ldr	r0, [pc, #428]	; (8000a14 <displaySEG7_1+0x31c>)
 8000868:	f001 fbf1 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800086c:	2200      	movs	r2, #0
 800086e:	2104      	movs	r1, #4
 8000870:	4868      	ldr	r0, [pc, #416]	; (8000a14 <displaySEG7_1+0x31c>)
 8000872:	f001 fbec 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000876:	2201      	movs	r2, #1
 8000878:	2108      	movs	r1, #8
 800087a:	4866      	ldr	r0, [pc, #408]	; (8000a14 <displaySEG7_1+0x31c>)
 800087c:	f001 fbe7 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000880:	2201      	movs	r2, #1
 8000882:	2110      	movs	r1, #16
 8000884:	4863      	ldr	r0, [pc, #396]	; (8000a14 <displaySEG7_1+0x31c>)
 8000886:	f001 fbe2 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800088a:	2200      	movs	r2, #0
 800088c:	2120      	movs	r1, #32
 800088e:	4861      	ldr	r0, [pc, #388]	; (8000a14 <displaySEG7_1+0x31c>)
 8000890:	f001 fbdd 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000894:	2200      	movs	r2, #0
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	485e      	ldr	r0, [pc, #376]	; (8000a14 <displaySEG7_1+0x31c>)
 800089a:	f001 fbd8 	bl	800204e <HAL_GPIO_WritePin>
        break;
 800089e:	e0b4      	b.n	8000a0a <displaySEG7_1+0x312>
    case 5:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	485b      	ldr	r0, [pc, #364]	; (8000a14 <displaySEG7_1+0x31c>)
 80008a6:	f001 fbd2 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 80008aa:	2201      	movs	r2, #1
 80008ac:	2102      	movs	r1, #2
 80008ae:	4859      	ldr	r0, [pc, #356]	; (8000a14 <displaySEG7_1+0x31c>)
 80008b0:	f001 fbcd 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80008b4:	2200      	movs	r2, #0
 80008b6:	2104      	movs	r1, #4
 80008b8:	4856      	ldr	r0, [pc, #344]	; (8000a14 <displaySEG7_1+0x31c>)
 80008ba:	f001 fbc8 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4854      	ldr	r0, [pc, #336]	; (8000a14 <displaySEG7_1+0x31c>)
 80008c4:	f001 fbc3 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80008c8:	2201      	movs	r2, #1
 80008ca:	2110      	movs	r1, #16
 80008cc:	4851      	ldr	r0, [pc, #324]	; (8000a14 <displaySEG7_1+0x31c>)
 80008ce:	f001 fbbe 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	484f      	ldr	r0, [pc, #316]	; (8000a14 <displaySEG7_1+0x31c>)
 80008d8:	f001 fbb9 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	484c      	ldr	r0, [pc, #304]	; (8000a14 <displaySEG7_1+0x31c>)
 80008e2:	f001 fbb4 	bl	800204e <HAL_GPIO_WritePin>
        break;
 80008e6:	e090      	b.n	8000a0a <displaySEG7_1+0x312>
    case 6:
	    HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	4849      	ldr	r0, [pc, #292]	; (8000a14 <displaySEG7_1+0x31c>)
 80008ee:	f001 fbae 	bl	800204e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 80008f2:	2201      	movs	r2, #1
 80008f4:	2102      	movs	r1, #2
 80008f6:	4847      	ldr	r0, [pc, #284]	; (8000a14 <displaySEG7_1+0x31c>)
 80008f8:	f001 fba9 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80008fc:	2200      	movs	r2, #0
 80008fe:	2104      	movs	r1, #4
 8000900:	4844      	ldr	r0, [pc, #272]	; (8000a14 <displaySEG7_1+0x31c>)
 8000902:	f001 fba4 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <displaySEG7_1+0x31c>)
 800090c:	f001 fb9f 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	483f      	ldr	r0, [pc, #252]	; (8000a14 <displaySEG7_1+0x31c>)
 8000916:	f001 fb9a 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	483d      	ldr	r0, [pc, #244]	; (8000a14 <displaySEG7_1+0x31c>)
 8000920:	f001 fb95 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000924:	2200      	movs	r2, #0
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	483a      	ldr	r0, [pc, #232]	; (8000a14 <displaySEG7_1+0x31c>)
 800092a:	f001 fb90 	bl	800204e <HAL_GPIO_WritePin>
	  break;
 800092e:	e06c      	b.n	8000a0a <displaySEG7_1+0x312>
    case 7:
		  HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	4837      	ldr	r0, [pc, #220]	; (8000a14 <displaySEG7_1+0x31c>)
 8000936:	f001 fb8a 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4835      	ldr	r0, [pc, #212]	; (8000a14 <displaySEG7_1+0x31c>)
 8000940:	f001 fb85 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	4832      	ldr	r0, [pc, #200]	; (8000a14 <displaySEG7_1+0x31c>)
 800094a:	f001 fb80 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 800094e:	2201      	movs	r2, #1
 8000950:	2108      	movs	r1, #8
 8000952:	4830      	ldr	r0, [pc, #192]	; (8000a14 <displaySEG7_1+0x31c>)
 8000954:	f001 fb7b 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	482d      	ldr	r0, [pc, #180]	; (8000a14 <displaySEG7_1+0x31c>)
 800095e:	f001 fb76 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	482b      	ldr	r0, [pc, #172]	; (8000a14 <displaySEG7_1+0x31c>)
 8000968:	f001 fb71 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 800096c:	2201      	movs	r2, #1
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	4828      	ldr	r0, [pc, #160]	; (8000a14 <displaySEG7_1+0x31c>)
 8000972:	f001 fb6c 	bl	800204e <HAL_GPIO_WritePin>
		  break;
 8000976:	e048      	b.n	8000a0a <displaySEG7_1+0x312>
    case 8:
		  HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	4825      	ldr	r0, [pc, #148]	; (8000a14 <displaySEG7_1+0x31c>)
 800097e:	f001 fb66 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4823      	ldr	r0, [pc, #140]	; (8000a14 <displaySEG7_1+0x31c>)
 8000988:	f001 fb61 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <displaySEG7_1+0x31c>)
 8000992:	f001 fb5c 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	481e      	ldr	r0, [pc, #120]	; (8000a14 <displaySEG7_1+0x31c>)
 800099c:	f001 fb57 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <displaySEG7_1+0x31c>)
 80009a6:	f001 fb52 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	4819      	ldr	r0, [pc, #100]	; (8000a14 <displaySEG7_1+0x31c>)
 80009b0:	f001 fb4d 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	4816      	ldr	r0, [pc, #88]	; (8000a14 <displaySEG7_1+0x31c>)
 80009ba:	f001 fb48 	bl	800204e <HAL_GPIO_WritePin>
		  break;
 80009be:	e024      	b.n	8000a0a <displaySEG7_1+0x312>
    case 9:
		  HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <displaySEG7_1+0x31c>)
 80009c6:	f001 fb42 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80009ca:	2200      	movs	r2, #0
 80009cc:	2102      	movs	r1, #2
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <displaySEG7_1+0x31c>)
 80009d0:	f001 fb3d 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80009d4:	2200      	movs	r2, #0
 80009d6:	2104      	movs	r1, #4
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <displaySEG7_1+0x31c>)
 80009da:	f001 fb38 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <displaySEG7_1+0x31c>)
 80009e4:	f001 fb33 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80009e8:	2201      	movs	r2, #1
 80009ea:	2110      	movs	r1, #16
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <displaySEG7_1+0x31c>)
 80009ee:	f001 fb2e 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <displaySEG7_1+0x31c>)
 80009f8:	f001 fb29 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80009fc:	2200      	movs	r2, #0
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <displaySEG7_1+0x31c>)
 8000a02:	f001 fb24 	bl	800204e <HAL_GPIO_WritePin>
		  break;
 8000a06:	e000      	b.n	8000a0a <displaySEG7_1+0x312>

    default:
      break;
 8000a08:	bf00      	nop
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <displaySEG7_2>:


void displaySEG7_2(int num){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b09      	cmp	r3, #9
 8000a24:	f200 81c8 	bhi.w	8000db8 <displaySEG7_2+0x3a0>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <displaySEG7_2+0x18>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a59 	.word	0x08000a59
 8000a34:	08000aaf 	.word	0x08000aaf
 8000a38:	08000b05 	.word	0x08000b05
 8000a3c:	08000b5b 	.word	0x08000b5b
 8000a40:	08000bb1 	.word	0x08000bb1
 8000a44:	08000c07 	.word	0x08000c07
 8000a48:	08000c5d 	.word	0x08000c5d
 8000a4c:	08000cb3 	.word	0x08000cb3
 8000a50:	08000d09 	.word	0x08000d09
 8000a54:	08000d5f 	.word	0x08000d5f
  switch(num){
    case 0:
          HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5e:	48d5      	ldr	r0, [pc, #852]	; (8000db4 <displaySEG7_2+0x39c>)
 8000a60:	f001 faf5 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	48d2      	ldr	r0, [pc, #840]	; (8000db4 <displaySEG7_2+0x39c>)
 8000a6c:	f001 faef 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	48cf      	ldr	r0, [pc, #828]	; (8000db4 <displaySEG7_2+0x39c>)
 8000a78:	f001 fae9 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a82:	48cc      	ldr	r0, [pc, #816]	; (8000db4 <displaySEG7_2+0x39c>)
 8000a84:	f001 fae3 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8e:	48c9      	ldr	r0, [pc, #804]	; (8000db4 <displaySEG7_2+0x39c>)
 8000a90:	f001 fadd 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	48c6      	ldr	r0, [pc, #792]	; (8000db4 <displaySEG7_2+0x39c>)
 8000a9c:	f001 fad7 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	48c3      	ldr	r0, [pc, #780]	; (8000db4 <displaySEG7_2+0x39c>)
 8000aa8:	f001 fad1 	bl	800204e <HAL_GPIO_WritePin>
        break;
 8000aac:	e185      	b.n	8000dba <displaySEG7_2+0x3a2>

    case 1:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab4:	48bf      	ldr	r0, [pc, #764]	; (8000db4 <displaySEG7_2+0x39c>)
 8000ab6:	f001 faca 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	48bc      	ldr	r0, [pc, #752]	; (8000db4 <displaySEG7_2+0x39c>)
 8000ac2:	f001 fac4 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000acc:	48b9      	ldr	r0, [pc, #740]	; (8000db4 <displaySEG7_2+0x39c>)
 8000ace:	f001 fabe 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad8:	48b6      	ldr	r0, [pc, #728]	; (8000db4 <displaySEG7_2+0x39c>)
 8000ada:	f001 fab8 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae4:	48b3      	ldr	r0, [pc, #716]	; (8000db4 <displaySEG7_2+0x39c>)
 8000ae6:	f001 fab2 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af0:	48b0      	ldr	r0, [pc, #704]	; (8000db4 <displaySEG7_2+0x39c>)
 8000af2:	f001 faac 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afc:	48ad      	ldr	r0, [pc, #692]	; (8000db4 <displaySEG7_2+0x39c>)
 8000afe:	f001 faa6 	bl	800204e <HAL_GPIO_WritePin>
        break;
 8000b02:	e15a      	b.n	8000dba <displaySEG7_2+0x3a2>

    case 2:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	48aa      	ldr	r0, [pc, #680]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b0c:	f001 fa9f 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b16:	48a7      	ldr	r0, [pc, #668]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b18:	f001 fa99 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 1 ) ;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b22:	48a4      	ldr	r0, [pc, #656]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b24:	f001 fa93 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2e:	48a1      	ldr	r0, [pc, #644]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b30:	f001 fa8d 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3a:	489e      	ldr	r0, [pc, #632]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b3c:	f001 fa87 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b46:	489b      	ldr	r0, [pc, #620]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b48:	f001 fa81 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b52:	4898      	ldr	r0, [pc, #608]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b54:	f001 fa7b 	bl	800204e <HAL_GPIO_WritePin>
        break;
 8000b58:	e12f      	b.n	8000dba <displaySEG7_2+0x3a2>

    case 3:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	4894      	ldr	r0, [pc, #592]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b62:	f001 fa74 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	4891      	ldr	r0, [pc, #580]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b6e:	f001 fa6e 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	488e      	ldr	r0, [pc, #568]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b7a:	f001 fa68 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b84:	488b      	ldr	r0, [pc, #556]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b86:	f001 fa62 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b90:	4888      	ldr	r0, [pc, #544]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b92:	f001 fa5c 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	4885      	ldr	r0, [pc, #532]	; (8000db4 <displaySEG7_2+0x39c>)
 8000b9e:	f001 fa56 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba8:	4882      	ldr	r0, [pc, #520]	; (8000db4 <displaySEG7_2+0x39c>)
 8000baa:	f001 fa50 	bl	800204e <HAL_GPIO_WritePin>
        break;
 8000bae:	e104      	b.n	8000dba <displaySEG7_2+0x3a2>

    case 4:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb6:	487f      	ldr	r0, [pc, #508]	; (8000db4 <displaySEG7_2+0x39c>)
 8000bb8:	f001 fa49 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc2:	487c      	ldr	r0, [pc, #496]	; (8000db4 <displaySEG7_2+0x39c>)
 8000bc4:	f001 fa43 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bce:	4879      	ldr	r0, [pc, #484]	; (8000db4 <displaySEG7_2+0x39c>)
 8000bd0:	f001 fa3d 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bda:	4876      	ldr	r0, [pc, #472]	; (8000db4 <displaySEG7_2+0x39c>)
 8000bdc:	f001 fa37 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be6:	4873      	ldr	r0, [pc, #460]	; (8000db4 <displaySEG7_2+0x39c>)
 8000be8:	f001 fa31 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf2:	4870      	ldr	r0, [pc, #448]	; (8000db4 <displaySEG7_2+0x39c>)
 8000bf4:	f001 fa2b 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfe:	486d      	ldr	r0, [pc, #436]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c00:	f001 fa25 	bl	800204e <HAL_GPIO_WritePin>
        break;
 8000c04:	e0d9      	b.n	8000dba <displaySEG7_2+0x3a2>
    case 5:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	4869      	ldr	r0, [pc, #420]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c0e:	f001 fa1e 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	4866      	ldr	r0, [pc, #408]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c1a:	f001 fa18 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	4863      	ldr	r0, [pc, #396]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c26:	f001 fa12 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c30:	4860      	ldr	r0, [pc, #384]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c32:	f001 fa0c 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3c:	485d      	ldr	r0, [pc, #372]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c3e:	f001 fa06 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	485a      	ldr	r0, [pc, #360]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c4a:	f001 fa00 	bl	800204e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c54:	4857      	ldr	r0, [pc, #348]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c56:	f001 f9fa 	bl	800204e <HAL_GPIO_WritePin>
        break;
 8000c5a:	e0ae      	b.n	8000dba <displaySEG7_2+0x3a2>
    case 6:
	    HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c62:	4854      	ldr	r0, [pc, #336]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c64:	f001 f9f3 	bl	800204e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6e:	4851      	ldr	r0, [pc, #324]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c70:	f001 f9ed 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7a:	484e      	ldr	r0, [pc, #312]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c7c:	f001 f9e7 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	484b      	ldr	r0, [pc, #300]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c88:	f001 f9e1 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	4848      	ldr	r0, [pc, #288]	; (8000db4 <displaySEG7_2+0x39c>)
 8000c94:	f001 f9db 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	4845      	ldr	r0, [pc, #276]	; (8000db4 <displaySEG7_2+0x39c>)
 8000ca0:	f001 f9d5 	bl	800204e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000caa:	4842      	ldr	r0, [pc, #264]	; (8000db4 <displaySEG7_2+0x39c>)
 8000cac:	f001 f9cf 	bl	800204e <HAL_GPIO_WritePin>
	  break;
 8000cb0:	e083      	b.n	8000dba <displaySEG7_2+0x3a2>
    case 7:
		  HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	483e      	ldr	r0, [pc, #248]	; (8000db4 <displaySEG7_2+0x39c>)
 8000cba:	f001 f9c8 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	483b      	ldr	r0, [pc, #236]	; (8000db4 <displaySEG7_2+0x39c>)
 8000cc6:	f001 f9c2 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd0:	4838      	ldr	r0, [pc, #224]	; (8000db4 <displaySEG7_2+0x39c>)
 8000cd2:	f001 f9bc 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cdc:	4835      	ldr	r0, [pc, #212]	; (8000db4 <displaySEG7_2+0x39c>)
 8000cde:	f001 f9b6 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce8:	4832      	ldr	r0, [pc, #200]	; (8000db4 <displaySEG7_2+0x39c>)
 8000cea:	f001 f9b0 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	482f      	ldr	r0, [pc, #188]	; (8000db4 <displaySEG7_2+0x39c>)
 8000cf6:	f001 f9aa 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d00:	482c      	ldr	r0, [pc, #176]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d02:	f001 f9a4 	bl	800204e <HAL_GPIO_WritePin>
		  break;
 8000d06:	e058      	b.n	8000dba <displaySEG7_2+0x3a2>
    case 8:
		  HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	4829      	ldr	r0, [pc, #164]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d10:	f001 f99d 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1a:	4826      	ldr	r0, [pc, #152]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d1c:	f001 f997 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d26:	4823      	ldr	r0, [pc, #140]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d28:	f001 f991 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d32:	4820      	ldr	r0, [pc, #128]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d34:	f001 f98b 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	481d      	ldr	r0, [pc, #116]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d40:	f001 f985 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	481a      	ldr	r0, [pc, #104]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d4c:	f001 f97f 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d56:	4817      	ldr	r0, [pc, #92]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d58:	f001 f979 	bl	800204e <HAL_GPIO_WritePin>
		  break;
 8000d5c:	e02d      	b.n	8000dba <displaySEG7_2+0x3a2>
    case 9:
		  HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d66:	f001 f972 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d70:	4810      	ldr	r0, [pc, #64]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d72:	f001 f96c 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d7e:	f001 f966 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	480a      	ldr	r0, [pc, #40]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d8a:	f001 f960 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <displaySEG7_2+0x39c>)
 8000d96:	f001 f95a 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	4804      	ldr	r0, [pc, #16]	; (8000db4 <displaySEG7_2+0x39c>)
 8000da2:	f001 f954 	bl	800204e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dac:	4801      	ldr	r0, [pc, #4]	; (8000db4 <displaySEG7_2+0x39c>)
 8000dae:	f001 f94e 	bl	800204e <HAL_GPIO_WritePin>
		  break;
 8000db2:	e002      	b.n	8000dba <displaySEG7_2+0x3a2>
 8000db4:	40010c00 	.word	0x40010c00

    default:
      break;
 8000db8:	bf00      	nop
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop

08000dc4 <enable0>:

void enable0(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <enable0+0x20>)
 8000dd0:	f001 f93d 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4802      	ldr	r0, [pc, #8]	; (8000de4 <enable0+0x20>)
 8000ddc:	f001 f937 	bl	800204e <HAL_GPIO_WritePin>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40010800 	.word	0x40010800

08000de8 <enable1>:

void enable1(){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <enable1+0x20>)
 8000df4:	f001 f92b 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	4802      	ldr	r0, [pc, #8]	; (8000e08 <enable1+0x20>)
 8000e00:	f001 f925 	bl	800204e <HAL_GPIO_WritePin>
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40010800 	.word	0x40010800

08000e0c <enable2>:

void enable2(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <enable2+0x20>)
 8000e18:	f001 f919 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e22:	4802      	ldr	r0, [pc, #8]	; (8000e2c <enable2+0x20>)
 8000e24:	f001 f913 	bl	800204e <HAL_GPIO_WritePin>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010800 	.word	0x40010800

08000e30 <enable3>:

void enable3(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <enable3+0x20>)
 8000e3c:	f001 f907 	bl	800204e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <enable3+0x20>)
 8000e48:	f001 f901 	bl	800204e <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40010800 	.word	0x40010800

08000e54 <showTimeDelay_First>:

void showTimeDelay_First(int first, int second){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	enable0();
 8000e5e:	f7ff ffb1 	bl	8000dc4 <enable0>
	displaySEG7_1(first/10);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <showTimeDelay_First+0x44>)
 8000e66:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6a:	1092      	asrs	r2, r2, #2
 8000e6c:	17db      	asrs	r3, r3, #31
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fc41 	bl	80006f8 <displaySEG7_1>
	enable2();
 8000e76:	f7ff ffc9 	bl	8000e0c <enable2>
	displaySEG7_2(second/10);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <showTimeDelay_First+0x44>)
 8000e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e82:	1092      	asrs	r2, r2, #2
 8000e84:	17db      	asrs	r3, r3, #31
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fdc5 	bl	8000a18 <displaySEG7_2>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	66666667 	.word	0x66666667

08000e9c <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	enable1();
 8000ea6:	f7ff ff9f 	bl	8000de8 <enable1>
	displaySEG7_1(first%10);
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <showTimeDelay_Second+0x58>)
 8000eae:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb2:	1099      	asrs	r1, r3, #2
 8000eb4:	17d3      	asrs	r3, r2, #31
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	1ad1      	subs	r1, r2, r3
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	f7ff fc18 	bl	80006f8 <displaySEG7_1>
	enable3();
 8000ec8:	f7ff ffb2 	bl	8000e30 <enable3>
	displaySEG7_2(second%10);
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <showTimeDelay_Second+0x58>)
 8000ed0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ed4:	1099      	asrs	r1, r3, #2
 8000ed6:	17d3      	asrs	r3, r2, #31
 8000ed8:	1ac9      	subs	r1, r1, r3
 8000eda:	460b      	mov	r3, r1
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	1ad1      	subs	r1, r2, r3
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	f7ff fd97 	bl	8000a18 <displaySEG7_2>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	66666667 	.word	0x66666667

08000ef8 <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <setValues+0x6c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <setValues+0x70>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <setValues+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <setValues+0x78>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <setValues+0x7c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <setValues+0x80>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <setValues+0x84>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <setValues+0x88>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <setValues+0x8c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <setValues+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <setValues+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <setValues+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <setValues+0x9c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <setValues+0xa0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <setValues+0xa4>)
 8000f50:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <setValues+0xa8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <setValues+0xac>)
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200000cb 	.word	0x200000cb
 8000f68:	200000d0 	.word	0x200000d0
 8000f6c:	200000cc 	.word	0x200000cc
 8000f70:	200000d8 	.word	0x200000d8
 8000f74:	200000cd 	.word	0x200000cd
 8000f78:	200000c9 	.word	0x200000c9
 8000f7c:	200000d2 	.word	0x200000d2
 8000f80:	200000ca 	.word	0x200000ca
 8000f84:	200000ce 	.word	0x200000ce
 8000f88:	200000c8 	.word	0x200000c8
 8000f8c:	200000d1 	.word	0x200000d1
 8000f90:	200000cf 	.word	0x200000cf
 8000f94:	200000d9 	.word	0x200000d9
 8000f98:	20000040 	.word	0x20000040
 8000f9c:	200000dc 	.word	0x200000dc
 8000fa0:	20000044 	.word	0x20000044
 8000fa4:	200000d4 	.word	0x200000d4

08000fa8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fd4e 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f814 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f89a 	bl	80010ec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fb8:	f000 f84c 	bl	8001054 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <main+0x30>)
 8000fbe:	f001 fca3 	bl	8002908 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer0(50);
  setValues();
 8000fc2:	f7ff ff99 	bl	8000ef8 <setValues>
  displayFirstLedCouple(LED_INIT);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff faae 	bl	8000528 <displayFirstLedCouple>
  while (1)
  {
	  // run the simulation with each mode and press button
	  auto_run();
 8000fcc:	f7ff f8be 	bl	800014c <auto_run>
	  manual_run();
 8000fd0:	f000 faca 	bl	8001568 <manual_run>
	  auto_run();
 8000fd4:	e7fa      	b.n	8000fcc <main+0x24>
 8000fd6:	bf00      	nop
 8000fd8:	200000e0 	.word	0x200000e0

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b090      	sub	sp, #64	; 0x40
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0318 	add.w	r3, r7, #24
 8000fe6:	2228      	movs	r2, #40	; 0x28
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 f848 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001002:	2301      	movs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001006:	2310      	movs	r3, #16
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f84c 	bl	80020b0 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800101e:	f000 f8c9 	bl	80011b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001022:	230f      	movs	r3, #15
 8001024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f001 fab8 	bl	80025b0 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001046:	f000 f8b5 	bl	80011b4 <Error_Handler>
  }
}
 800104a:	bf00      	nop
 800104c:	3740      	adds	r7, #64	; 0x40
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_TIM2_Init+0x94>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_TIM2_Init+0x94>)
 800107a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800107e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_TIM2_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_TIM2_Init+0x94>)
 8001088:	2209      	movs	r2, #9
 800108a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_TIM2_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001098:	4813      	ldr	r0, [pc, #76]	; (80010e8 <MX_TIM2_Init+0x94>)
 800109a:	f001 fbe5 	bl	8002868 <HAL_TIM_Base_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010a4:	f000 f886 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <MX_TIM2_Init+0x94>)
 80010b6:	f001 fd7b 	bl	8002bb0 <HAL_TIM_ConfigClockSource>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010c0:	f000 f878 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_TIM2_Init+0x94>)
 80010d2:	f001 ff47 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010dc:	f000 f86a 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000e0 	.word	0x200000e0

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_GPIO_Init+0xbc>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <MX_GPIO_Init+0xbc>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_GPIO_Init+0xbc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_GPIO_Init+0xbc>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <MX_GPIO_Init+0xbc>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_GPIO_Init+0xbc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FIRST_COUPLE_RED_Pin|FIRST_COUPLE_YELLOW_Pin|FIRST_COUPLE_GREEN_Pin|SECOND_COUPLE_RED_Pin
 8001130:	2200      	movs	r2, #0
 8001132:	f24f 01fc 	movw	r1, #61692	; 0xf0fc
 8001136:	481d      	ldr	r0, [pc, #116]	; (80011ac <MX_GPIO_Init+0xc0>)
 8001138:	f000 ff89 	bl	800204e <HAL_GPIO_WritePin>
                          |SECOND_COUPLE_YELLOW_Pin|SECOND_COUPLE_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|C2_Pin
 800113c:	2200      	movs	r2, #0
 800113e:	f647 717f 	movw	r1, #32639	; 0x7f7f
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <MX_GPIO_Init+0xc4>)
 8001144:	f000 ff83 	bl	800204e <HAL_GPIO_WritePin>
                          |A2_Pin|B2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : FIRST_COUPLE_RED_Pin FIRST_COUPLE_YELLOW_Pin FIRST_COUPLE_GREEN_Pin SECOND_COUPLE_RED_Pin
                           SECOND_COUPLE_YELLOW_Pin SECOND_COUPLE_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = FIRST_COUPLE_RED_Pin|FIRST_COUPLE_YELLOW_Pin|FIRST_COUPLE_GREEN_Pin|SECOND_COUPLE_RED_Pin
 8001148:	f24f 03fc 	movw	r3, #61692	; 0xf0fc
 800114c:	60bb      	str	r3, [r7, #8]
                          |SECOND_COUPLE_YELLOW_Pin|SECOND_COUPLE_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4619      	mov	r1, r3
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_GPIO_Init+0xc0>)
 8001162:	f000 fde3 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin C2_Pin
                           D2_Pin E2_Pin F2_Pin G2_Pin
                           D1_Pin E1_Pin F1_Pin G1_Pin
                           A2_Pin B2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|C2_Pin
 8001166:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800116a:	60bb      	str	r3, [r7, #8]
                          |D2_Pin|E2_Pin|F2_Pin|G2_Pin
                          |D1_Pin|E1_Pin|F1_Pin|G1_Pin
                          |A2_Pin|B2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4619      	mov	r1, r3
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_GPIO_Init+0xc4>)
 8001180:	f000 fdd4 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001184:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4619      	mov	r1, r3
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_GPIO_Init+0xc0>)
 800119a:	f000 fdc7 	bl	8001d2c <HAL_GPIO_Init>

}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <mode2_run>:
 *      Author: Administrator
 */

#include "manual.h"

void mode2_run(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	switch(mode2Toggle){
 80011c4:	4b45      	ldr	r3, [pc, #276]	; (80012dc <mode2_run+0x11c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <mode2_run+0x12>
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d007      	beq.n	80011e0 <mode2_run+0x20>
				toggleLeds(RED);
				setTimer3(25);
			}
			break;
		default:
			break;
 80011d0:	e011      	b.n	80011f6 <mode2_run+0x36>
			mode2Toggle = TOGGLE;
 80011d2:	4b42      	ldr	r3, [pc, #264]	; (80012dc <mode2_run+0x11c>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
			setTimer3(25);
 80011d8:	2019      	movs	r0, #25
 80011da:	f000 fa3f 	bl	800165c <setTimer3>
			break;
 80011de:	e00a      	b.n	80011f6 <mode2_run+0x36>
			if(timer3_flag == 1){
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <mode2_run+0x120>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <mode2_run+0x34>
				toggleLeds(RED);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fa55 	bl	8000698 <toggleLeds>
				setTimer3(25);
 80011ee:	2019      	movs	r0, #25
 80011f0:	f000 fa34 	bl	800165c <setTimer3>
			break;
 80011f4:	bf00      	nop
	}

	switch(mode2Increase){
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <mode2_run+0x124>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <mode2_run+0x44>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d00f      	beq.n	8001222 <mode2_run+0x62>
					setValues();
				}
				break;

			default:
				break;
 8001202:	e02f      	b.n	8001264 <mode2_run+0xa4>
				if (isButtonPressed(1)==1){
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff f8e5 	bl	80003d4 <isButtonPressed>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d126      	bne.n	800125e <mode2_run+0x9e>
					mode2Increase = INCREASE;
 8001210:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <mode2_run+0x124>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
					redDelay +=1;
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <mode2_run+0x128>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <mode2_run+0x128>)
 800121e:	6013      	str	r3, [r2, #0]
				break;
 8001220:	e01d      	b.n	800125e <mode2_run+0x9e>
				if (isButtonPressed(1)==1){
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff f8d6 	bl	80003d4 <isButtonPressed>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10b      	bne.n	8001246 <mode2_run+0x86>
					redDelay +=1;
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <mode2_run+0x128>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <mode2_run+0x128>)
 8001236:	6013      	str	r3, [r2, #0]
					if(redDelay >= 99) redDelay = 1;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <mode2_run+0x128>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b62      	cmp	r3, #98	; 0x62
 800123e:	dd02      	ble.n	8001246 <mode2_run+0x86>
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <mode2_run+0x128>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff f8c4 	bl	80003d4 <isButtonPressed>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <mode2_run+0xa2>
					MODE = MODE1;
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <mode2_run+0x12c>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
					setValues();
 8001258:	f7ff fe4e 	bl	8000ef8 <setValues>
				break;
 800125c:	e001      	b.n	8001262 <mode2_run+0xa2>
				break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <mode2_run+0xa4>
				break;
 8001262:	bf00      	nop
		}

	switch(mode2Seg){
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <mode2_run+0x130>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d01e      	beq.n	80012aa <mode2_run+0xea>
 800126c:	2b02      	cmp	r3, #2
 800126e:	dc2d      	bgt.n	80012cc <mode2_run+0x10c>
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <mode2_run+0xba>
 8001274:	2b01      	cmp	r3, #1
 8001276:	d007      	beq.n	8001288 <mode2_run+0xc8>
				setTimer4(25);
				mode2Seg = FIRST;
			}
			break;
		default:
			break;
 8001278:	e028      	b.n	80012cc <mode2_run+0x10c>
			mode2Seg = FIRST;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <mode2_run+0x130>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
			setTimer4(25);
 8001280:	2019      	movs	r0, #25
 8001282:	f000 f9ff 	bl	8001684 <setTimer4>
			break;
 8001286:	e026      	b.n	80012d6 <mode2_run+0x116>
			if(timer4_flag == 1){
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <mode2_run+0x134>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d11f      	bne.n	80012d0 <mode2_run+0x110>
				showTimeDelay_First(1,redDelay);
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <mode2_run+0x128>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fddc 	bl	8000e54 <showTimeDelay_First>
				mode2Seg = SECOND;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <mode2_run+0x130>)
 800129e:	2202      	movs	r2, #2
 80012a0:	701a      	strb	r2, [r3, #0]
				setTimer4(25);
 80012a2:	2019      	movs	r0, #25
 80012a4:	f000 f9ee 	bl	8001684 <setTimer4>
			break;
 80012a8:	e012      	b.n	80012d0 <mode2_run+0x110>
			if(timer4_flag == 1){
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <mode2_run+0x134>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d110      	bne.n	80012d4 <mode2_run+0x114>
				showTimeDelay_Second(1,redDelay);
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <mode2_run+0x128>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fdef 	bl	8000e9c <showTimeDelay_Second>
				setTimer4(25);
 80012be:	2019      	movs	r0, #25
 80012c0:	f000 f9e0 	bl	8001684 <setTimer4>
				mode2Seg = FIRST;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <mode2_run+0x130>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			break;
 80012ca:	e003      	b.n	80012d4 <mode2_run+0x114>
			break;
 80012cc:	bf00      	nop
 80012ce:	e002      	b.n	80012d6 <mode2_run+0x116>
			break;
 80012d0:	bf00      	nop
 80012d2:	e000      	b.n	80012d6 <mode2_run+0x116>
			break;
 80012d4:	bf00      	nop
	}
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000d0 	.word	0x200000d0
 80012e0:	2000008c 	.word	0x2000008c
 80012e4:	200000d8 	.word	0x200000d8
 80012e8:	20000040 	.word	0x20000040
 80012ec:	200000cb 	.word	0x200000cb
 80012f0:	200000cc 	.word	0x200000cc
 80012f4:	20000090 	.word	0x20000090

080012f8 <mode3_run>:

void mode3_run(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	switch(mode3Toggle){
 80012fc:	4b45      	ldr	r3, [pc, #276]	; (8001414 <mode3_run+0x11c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <mode3_run+0x12>
 8001304:	2b01      	cmp	r3, #1
 8001306:	d007      	beq.n	8001318 <mode3_run+0x20>
				toggleLeds(YELLOW);
				setTimer5(25);
			}
			break;
		default:
			break;
 8001308:	e011      	b.n	800132e <mode3_run+0x36>
			mode3Toggle = TOGGLE;
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <mode3_run+0x11c>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
			setTimer5(25);
 8001310:	2019      	movs	r0, #25
 8001312:	f000 f9cb 	bl	80016ac <setTimer5>
			break;
 8001316:	e00a      	b.n	800132e <mode3_run+0x36>
			if(timer5_flag == 1){
 8001318:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <mode3_run+0x120>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <mode3_run+0x34>
				toggleLeds(YELLOW);
 8001320:	2003      	movs	r0, #3
 8001322:	f7ff f9b9 	bl	8000698 <toggleLeds>
				setTimer5(25);
 8001326:	2019      	movs	r0, #25
 8001328:	f000 f9c0 	bl	80016ac <setTimer5>
			break;
 800132c:	bf00      	nop
	}

	switch(mode3Increase){
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <mode3_run+0x124>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <mode3_run+0x44>
 8001336:	2b01      	cmp	r3, #1
 8001338:	d00f      	beq.n	800135a <mode3_run+0x62>
					setValues();
				}
				break;

			default:
				break;
 800133a:	e02f      	b.n	800139c <mode3_run+0xa4>
				if (isButtonPressed(1)==1){
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff f849 	bl	80003d4 <isButtonPressed>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d126      	bne.n	8001396 <mode3_run+0x9e>
					mode3Increase = INCREASE;
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <mode3_run+0x124>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
					yellowDelay +=1;
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <mode3_run+0x128>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	4a32      	ldr	r2, [pc, #200]	; (8001420 <mode3_run+0x128>)
 8001356:	6013      	str	r3, [r2, #0]
				break;
 8001358:	e01d      	b.n	8001396 <mode3_run+0x9e>
				if (isButtonPressed(1)==1){
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff f83a 	bl	80003d4 <isButtonPressed>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10b      	bne.n	800137e <mode3_run+0x86>
					yellowDelay +=1;
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <mode3_run+0x128>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <mode3_run+0x128>)
 800136e:	6013      	str	r3, [r2, #0]
					if(yellowDelay >= 99) yellowDelay = 1;
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <mode3_run+0x128>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b62      	cmp	r3, #98	; 0x62
 8001376:	dd02      	ble.n	800137e <mode3_run+0x86>
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <mode3_run+0x128>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff f828 	bl	80003d4 <isButtonPressed>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d107      	bne.n	800139a <mode3_run+0xa2>
					MODE = MODE1;
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <mode3_run+0x12c>)
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
					setValues();
 8001390:	f7ff fdb2 	bl	8000ef8 <setValues>
				break;
 8001394:	e001      	b.n	800139a <mode3_run+0xa2>
				break;
 8001396:	bf00      	nop
 8001398:	e000      	b.n	800139c <mode3_run+0xa4>
				break;
 800139a:	bf00      	nop
		}

	switch(mode3Seg){
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <mode3_run+0x130>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d01e      	beq.n	80013e2 <mode3_run+0xea>
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	dc2d      	bgt.n	8001404 <mode3_run+0x10c>
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <mode3_run+0xba>
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d007      	beq.n	80013c0 <mode3_run+0xc8>
				setTimer6(25);
				mode3Seg = FIRST;
			}
			break;
		default:
			break;
 80013b0:	e028      	b.n	8001404 <mode3_run+0x10c>
			mode3Seg = FIRST;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <mode3_run+0x130>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
			setTimer6(25);
 80013b8:	2019      	movs	r0, #25
 80013ba:	f000 f98b 	bl	80016d4 <setTimer6>
			break;
 80013be:	e026      	b.n	800140e <mode3_run+0x116>
			if(timer6_flag == 1){
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <mode3_run+0x134>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d11f      	bne.n	8001408 <mode3_run+0x110>
				showTimeDelay_First(1,yellowDelay);
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <mode3_run+0x128>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fd40 	bl	8000e54 <showTimeDelay_First>
				mode3Seg = SECOND;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <mode3_run+0x130>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
				setTimer6(25);
 80013da:	2019      	movs	r0, #25
 80013dc:	f000 f97a 	bl	80016d4 <setTimer6>
			break;
 80013e0:	e012      	b.n	8001408 <mode3_run+0x110>
			if(timer6_flag == 1){
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <mode3_run+0x134>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d110      	bne.n	800140c <mode3_run+0x114>
				showTimeDelay_Second(1,yellowDelay);
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <mode3_run+0x128>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fd53 	bl	8000e9c <showTimeDelay_Second>
				setTimer6(25);
 80013f6:	2019      	movs	r0, #25
 80013f8:	f000 f96c 	bl	80016d4 <setTimer6>
				mode3Seg = FIRST;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <mode3_run+0x130>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
			break;
 8001402:	e003      	b.n	800140c <mode3_run+0x114>
			break;
 8001404:	bf00      	nop
 8001406:	e002      	b.n	800140e <mode3_run+0x116>
			break;
 8001408:	bf00      	nop
 800140a:	e000      	b.n	800140e <mode3_run+0x116>
			break;
 800140c:	bf00      	nop
	}
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200000cd 	.word	0x200000cd
 8001418:	20000094 	.word	0x20000094
 800141c:	200000d2 	.word	0x200000d2
 8001420:	20000048 	.word	0x20000048
 8001424:	200000cb 	.word	0x200000cb
 8001428:	200000c9 	.word	0x200000c9
 800142c:	20000098 	.word	0x20000098

08001430 <mode4_run>:

void mode4_run(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	switch(mode4Toggle){
 8001434:	4b45      	ldr	r3, [pc, #276]	; (800154c <mode4_run+0x11c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <mode4_run+0x12>
 800143c:	2b01      	cmp	r3, #1
 800143e:	d007      	beq.n	8001450 <mode4_run+0x20>
				toggleLeds(GREEN);
				setTimer7(25);
			}
			break;
		default:
			break;
 8001440:	e011      	b.n	8001466 <mode4_run+0x36>
			mode4Toggle = TOGGLE;
 8001442:	4b42      	ldr	r3, [pc, #264]	; (800154c <mode4_run+0x11c>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
			setTimer7(25);
 8001448:	2019      	movs	r0, #25
 800144a:	f000 f957 	bl	80016fc <setTimer7>
			break;
 800144e:	e00a      	b.n	8001466 <mode4_run+0x36>
			if(timer7_flag == 1){
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <mode4_run+0x120>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <mode4_run+0x34>
				toggleLeds(GREEN);
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff f91d 	bl	8000698 <toggleLeds>
				setTimer7(25);
 800145e:	2019      	movs	r0, #25
 8001460:	f000 f94c 	bl	80016fc <setTimer7>
			break;
 8001464:	bf00      	nop
	}

	switch(mode4Increase){
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <mode4_run+0x124>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <mode4_run+0x44>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d00f      	beq.n	8001492 <mode4_run+0x62>
					setValues();
				}
				break;

			default:
				break;
 8001472:	e02f      	b.n	80014d4 <mode4_run+0xa4>
				if (isButtonPressed(1)==1){
 8001474:	2001      	movs	r0, #1
 8001476:	f7fe ffad 	bl	80003d4 <isButtonPressed>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d126      	bne.n	80014ce <mode4_run+0x9e>
					mode4Increase = INCREASE;
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <mode4_run+0x124>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
					greenDelay +=1;
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <mode4_run+0x128>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a32      	ldr	r2, [pc, #200]	; (8001558 <mode4_run+0x128>)
 800148e:	6013      	str	r3, [r2, #0]
				break;
 8001490:	e01d      	b.n	80014ce <mode4_run+0x9e>
				if (isButtonPressed(1)==1){
 8001492:	2001      	movs	r0, #1
 8001494:	f7fe ff9e 	bl	80003d4 <isButtonPressed>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10b      	bne.n	80014b6 <mode4_run+0x86>
					greenDelay +=1;
 800149e:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <mode4_run+0x128>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <mode4_run+0x128>)
 80014a6:	6013      	str	r3, [r2, #0]
					if(greenDelay >= 99) greenDelay = 1;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <mode4_run+0x128>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b62      	cmp	r3, #98	; 0x62
 80014ae:	dd02      	ble.n	80014b6 <mode4_run+0x86>
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <mode4_run+0x128>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 80014b6:	2002      	movs	r0, #2
 80014b8:	f7fe ff8c 	bl	80003d4 <isButtonPressed>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <mode4_run+0xa2>
					MODE = MODE1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <mode4_run+0x12c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
					setValues();
 80014c8:	f7ff fd16 	bl	8000ef8 <setValues>
				break;
 80014cc:	e001      	b.n	80014d2 <mode4_run+0xa2>
				break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <mode4_run+0xa4>
				break;
 80014d2:	bf00      	nop
		}

	switch(mode4Seg){
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <mode4_run+0x130>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d01e      	beq.n	800151a <mode4_run+0xea>
 80014dc:	2b02      	cmp	r3, #2
 80014de:	dc2d      	bgt.n	800153c <mode4_run+0x10c>
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <mode4_run+0xba>
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d007      	beq.n	80014f8 <mode4_run+0xc8>
				setTimer8(25);
				mode4Seg = FIRST;
			}
			break;
		default:
			break;
 80014e8:	e028      	b.n	800153c <mode4_run+0x10c>
			mode4Seg = FIRST;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <mode4_run+0x130>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
			setTimer8(25);
 80014f0:	2019      	movs	r0, #25
 80014f2:	f000 f917 	bl	8001724 <setTimer8>
			break;
 80014f6:	e026      	b.n	8001546 <mode4_run+0x116>
			if(timer8_flag == 1){
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <mode4_run+0x134>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d11f      	bne.n	8001540 <mode4_run+0x110>
				showTimeDelay_First(1,greenDelay);
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <mode4_run+0x128>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff fca4 	bl	8000e54 <showTimeDelay_First>
				mode4Seg = SECOND;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <mode4_run+0x130>)
 800150e:	2202      	movs	r2, #2
 8001510:	701a      	strb	r2, [r3, #0]
				setTimer8(25);
 8001512:	2019      	movs	r0, #25
 8001514:	f000 f906 	bl	8001724 <setTimer8>
			break;
 8001518:	e012      	b.n	8001540 <mode4_run+0x110>
			if(timer8_flag == 1){
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <mode4_run+0x134>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d110      	bne.n	8001544 <mode4_run+0x114>
				showTimeDelay_Second(1,greenDelay);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <mode4_run+0x128>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4619      	mov	r1, r3
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff fcb7 	bl	8000e9c <showTimeDelay_Second>
				setTimer8(25);
 800152e:	2019      	movs	r0, #25
 8001530:	f000 f8f8 	bl	8001724 <setTimer8>
				mode4Seg = FIRST;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <mode4_run+0x130>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
			break;
 800153a:	e003      	b.n	8001544 <mode4_run+0x114>
			break;
 800153c:	bf00      	nop
 800153e:	e002      	b.n	8001546 <mode4_run+0x116>
			break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <mode4_run+0x116>
			break;
 8001544:	bf00      	nop
	}
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000ca 	.word	0x200000ca
 8001550:	2000009c 	.word	0x2000009c
 8001554:	200000c8 	.word	0x200000c8
 8001558:	20000044 	.word	0x20000044
 800155c:	200000cb 	.word	0x200000cb
 8001560:	200000ce 	.word	0x200000ce
 8001564:	200000a0 	.word	0x200000a0

08001568 <manual_run>:

void manual_run(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	switch(MODE){
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <manual_run+0x78>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b04      	cmp	r3, #4
 8001572:	d01e      	beq.n	80015b2 <manual_run+0x4a>
 8001574:	2b04      	cmp	r3, #4
 8001576:	dc2a      	bgt.n	80015ce <manual_run+0x66>
 8001578:	2b02      	cmp	r3, #2
 800157a:	d002      	beq.n	8001582 <manual_run+0x1a>
 800157c:	2b03      	cmp	r3, #3
 800157e:	d00c      	beq.n	800159a <manual_run+0x32>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 8001580:	e025      	b.n	80015ce <manual_run+0x66>
			mode2_run();
 8001582:	f7ff fe1d 	bl	80011c0 <mode2_run>
			if (isButtonPressed(0) == 1){
 8001586:	2000      	movs	r0, #0
 8001588:	f7fe ff24 	bl	80003d4 <isButtonPressed>
 800158c:	4603      	mov	r3, r0
 800158e:	2b01      	cmp	r3, #1
 8001590:	d11f      	bne.n	80015d2 <manual_run+0x6a>
				MODE = MODE3;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <manual_run+0x78>)
 8001594:	2203      	movs	r2, #3
 8001596:	701a      	strb	r2, [r3, #0]
			break;
 8001598:	e01b      	b.n	80015d2 <manual_run+0x6a>
			mode3_run();
 800159a:	f7ff fead 	bl	80012f8 <mode3_run>
			if (isButtonPressed(0) == 1){
 800159e:	2000      	movs	r0, #0
 80015a0:	f7fe ff18 	bl	80003d4 <isButtonPressed>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d115      	bne.n	80015d6 <manual_run+0x6e>
				MODE = MODE4;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <manual_run+0x78>)
 80015ac:	2204      	movs	r2, #4
 80015ae:	701a      	strb	r2, [r3, #0]
			break;
 80015b0:	e011      	b.n	80015d6 <manual_run+0x6e>
			mode4_run();
 80015b2:	f7ff ff3d 	bl	8001430 <mode4_run>
			if (isButtonPressed(0) == 1){
 80015b6:	2000      	movs	r0, #0
 80015b8:	f7fe ff0c 	bl	80003d4 <isButtonPressed>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d10b      	bne.n	80015da <manual_run+0x72>
				MODE = MODE1;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <manual_run+0x78>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
				setValues();
 80015c8:	f7ff fc96 	bl	8000ef8 <setValues>
			break;
 80015cc:	e005      	b.n	80015da <manual_run+0x72>
			break;
 80015ce:	bf00      	nop
 80015d0:	e004      	b.n	80015dc <manual_run+0x74>
			break;
 80015d2:	bf00      	nop
 80015d4:	e002      	b.n	80015dc <manual_run+0x74>
			break;
 80015d6:	bf00      	nop
 80015d8:	e000      	b.n	80015dc <manual_run+0x74>
			break;
 80015da:	bf00      	nop
	}
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000cb 	.word	0x200000cb

080015e4 <setTimer0>:

//timer 0
int timer0_counter = 0;
int timer0_flag = 0;

void setTimer0(int duration){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <setTimer0+0x20>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <setTimer0+0x24>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200000a4 	.word	0x200000a4
 8001608:	20000080 	.word	0x20000080

0800160c <setTimer1>:

//timer 1
int timer1_counter = 0;
int timer1_flag = 0;

void setTimer1(int duration){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <setTimer1+0x20>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <setTimer1+0x24>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200000a8 	.word	0x200000a8
 8001630:	20000084 	.word	0x20000084

08001634 <setTimer2>:

//timer 2
int timer2_counter = 0;
int timer2_flag = 0;

void setTimer2(int duration){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <setTimer2+0x20>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <setTimer2+0x24>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200000ac 	.word	0x200000ac
 8001658:	20000088 	.word	0x20000088

0800165c <setTimer3>:

//timer 3
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration){
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <setTimer3+0x20>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <setTimer3+0x24>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200000b0 	.word	0x200000b0
 8001680:	2000008c 	.word	0x2000008c

08001684 <setTimer4>:

//timer 4
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <setTimer4+0x20>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <setTimer4+0x24>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200000b4 	.word	0x200000b4
 80016a8:	20000090 	.word	0x20000090

080016ac <setTimer5>:

//timer 5
int timer5_counter = 0;
int timer5_flag = 0;

void setTimer5(int duration){
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 80016b4:	4a05      	ldr	r2, [pc, #20]	; (80016cc <setTimer5+0x20>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <setTimer5+0x24>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200000b8 	.word	0x200000b8
 80016d0:	20000094 	.word	0x20000094

080016d4 <setTimer6>:

//timer 6
int timer6_counter = 0;
int timer6_flag = 0;

void setTimer6(int duration){
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <setTimer6+0x20>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <setTimer6+0x24>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200000bc 	.word	0x200000bc
 80016f8:	20000098 	.word	0x20000098

080016fc <setTimer7>:

//timer 7
int timer7_counter = 0;
int timer7_flag = 0;

void setTimer7(int duration){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	timer7_counter = duration;
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <setTimer7+0x20>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <setTimer7+0x24>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200000c0 	.word	0x200000c0
 8001720:	2000009c 	.word	0x2000009c

08001724 <setTimer8>:

//timer 8
int timer8_counter = 0;
int timer8_flag = 0;

void setTimer8(int duration){
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	timer8_counter = duration;
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <setTimer8+0x20>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <setTimer8+0x24>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200000c4 	.word	0x200000c4
 8001748:	200000a0 	.word	0x200000a0

0800174c <timer_run>:



void timer_run(){
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8001750:	4b49      	ldr	r3, [pc, #292]	; (8001878 <timer_run+0x12c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd0b      	ble.n	8001770 <timer_run+0x24>
		timer0_counter--;
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <timer_run+0x12c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	4a46      	ldr	r2, [pc, #280]	; (8001878 <timer_run+0x12c>)
 8001760:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0){
 8001762:	4b45      	ldr	r3, [pc, #276]	; (8001878 <timer_run+0x12c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <timer_run+0x24>
			timer0_flag = 1;
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <timer_run+0x130>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0){
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <timer_run+0x134>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	dd0b      	ble.n	8001790 <timer_run+0x44>
		timer1_counter--;
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <timer_run+0x134>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	4a40      	ldr	r2, [pc, #256]	; (8001880 <timer_run+0x134>)
 8001780:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <timer_run+0x134>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <timer_run+0x44>
			timer1_flag = 1;
 800178a:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <timer_run+0x138>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <timer_run+0x13c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dd0b      	ble.n	80017b0 <timer_run+0x64>
		timer2_counter--;
 8001798:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <timer_run+0x13c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <timer_run+0x13c>)
 80017a0:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <timer_run+0x13c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <timer_run+0x64>
			timer2_flag = 1;
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <timer_run+0x140>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80017b0:	4b37      	ldr	r3, [pc, #220]	; (8001890 <timer_run+0x144>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dd0b      	ble.n	80017d0 <timer_run+0x84>
		timer3_counter--;
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <timer_run+0x144>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3b01      	subs	r3, #1
 80017be:	4a34      	ldr	r2, [pc, #208]	; (8001890 <timer_run+0x144>)
 80017c0:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 80017c2:	4b33      	ldr	r3, [pc, #204]	; (8001890 <timer_run+0x144>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <timer_run+0x84>
			timer3_flag = 1;
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <timer_run+0x148>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <timer_run+0x14c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dd0b      	ble.n	80017f0 <timer_run+0xa4>
			timer4_counter--;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <timer_run+0x14c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <timer_run+0x14c>)
 80017e0:	6013      	str	r3, [r2, #0]
			if(timer4_counter == 0){
 80017e2:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <timer_run+0x14c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <timer_run+0xa4>
				timer4_flag = 1;
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <timer_run+0x150>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer5_counter > 0){
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <timer_run+0x154>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dd0b      	ble.n	8001810 <timer_run+0xc4>
		timer5_counter--;
 80017f8:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <timer_run+0x154>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <timer_run+0x154>)
 8001800:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <timer_run+0x154>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <timer_run+0xc4>
			timer5_flag = 1;
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <timer_run+0x158>)
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <timer_run+0x15c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd0b      	ble.n	8001830 <timer_run+0xe4>
			timer6_counter--;
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <timer_run+0x15c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <timer_run+0x15c>)
 8001820:	6013      	str	r3, [r2, #0]
			if(timer6_counter == 0){
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <timer_run+0x15c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <timer_run+0xe4>
				timer6_flag = 1;
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <timer_run+0x160>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer7_counter > 0){
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <timer_run+0x164>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	dd0b      	ble.n	8001850 <timer_run+0x104>
			timer7_counter--;
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <timer_run+0x164>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <timer_run+0x164>)
 8001840:	6013      	str	r3, [r2, #0]
			if(timer7_counter == 0){
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <timer_run+0x164>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <timer_run+0x104>
				timer7_flag = 1;
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <timer_run+0x168>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer8_counter > 0){
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <timer_run+0x16c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	dd0b      	ble.n	8001870 <timer_run+0x124>
			timer8_counter--;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <timer_run+0x16c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <timer_run+0x16c>)
 8001860:	6013      	str	r3, [r2, #0]
			if(timer8_counter == 0){
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <timer_run+0x16c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <timer_run+0x124>
				timer8_flag = 1;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <timer_run+0x170>)
 800186c:	2201      	movs	r2, #1
 800186e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	200000a4 	.word	0x200000a4
 800187c:	20000080 	.word	0x20000080
 8001880:	200000a8 	.word	0x200000a8
 8001884:	20000084 	.word	0x20000084
 8001888:	200000ac 	.word	0x200000ac
 800188c:	20000088 	.word	0x20000088
 8001890:	200000b0 	.word	0x200000b0
 8001894:	2000008c 	.word	0x2000008c
 8001898:	200000b4 	.word	0x200000b4
 800189c:	20000090 	.word	0x20000090
 80018a0:	200000b8 	.word	0x200000b8
 80018a4:	20000094 	.word	0x20000094
 80018a8:	200000bc 	.word	0x200000bc
 80018ac:	20000098 	.word	0x20000098
 80018b0:	200000c0 	.word	0x200000c0
 80018b4:	2000009c 	.word	0x2000009c
 80018b8:	200000c4 	.word	0x200000c4
 80018bc:	200000a0 	.word	0x200000a0

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_MspInit+0x5c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <HAL_MspInit+0x5c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_MspInit+0x5c>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_MspInit+0x5c>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_MspInit+0x5c>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_MspInit+0x5c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_MspInit+0x60>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_MspInit+0x60>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d113      	bne.n	800195e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_TIM_Base_MspInit+0x44>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201c      	movs	r0, #28
 8001954:	f000 f9b3 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001958:	201c      	movs	r0, #28
 800195a:	f000 f9cc 	bl	8001cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <NMI_Handler+0x4>

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b2:	f000 f891 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM2_IRQHandler+0x10>)
 80019c2:	f000 ffed 	bl	80029a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000e0 	.word	0x200000e0

080019d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "button.h"
#include "software_timer.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	if( htim -> Instance == TIM2 )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d103      	bne.n	80019f6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		getKeyInput();
 80019ee:	f7fe fd1b 	bl	8000428 <getKeyInput>
		timer_run();
 80019f2:	f7ff feab 	bl	800174c <timer_run>
	}
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a00:	f7ff ffe6 	bl	80019d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480b      	ldr	r0, [pc, #44]	; (8001a34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a06:	490c      	ldr	r1, [pc, #48]	; (8001a38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a08:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a1c:	4c09      	ldr	r4, [pc, #36]	; (8001a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f001 fb05 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a2e:	f7ff fabb 	bl	8000fa8 <main>
  bx lr
 8001a32:	4770      	bx	lr
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001a3c:	080030d4 	.word	0x080030d4
  ldr r2, =_sbss
 8001a40:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001a44:	2000012c 	.word	0x2000012c

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_Init+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_Init+0x28>)
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f923 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff ff2a 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f93b 	bl	8001d12 <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f903 	bl	8001cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000004c 	.word	0x2000004c
 8001ad0:	20000054 	.word	0x20000054
 8001ad4:	20000050 	.word	0x20000050

08001ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_IncTick+0x1c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_IncTick+0x20>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <HAL_IncTick+0x20>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	20000054 	.word	0x20000054
 8001af8:	20000128 	.word	0x20000128

08001afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <HAL_GetTick+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000128 	.word	0x20000128

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4906      	ldr	r1, [pc, #24]	; (8001ba8 <__NVIC_EnableIRQ+0x34>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff90 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff2d 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd0:	f7ff ff42 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	6978      	ldr	r0, [r7, #20]
 8001cdc:	f7ff ff90 	bl	8001c00 <NVIC_EncodePriority>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff5f 	bl	8001bac <__NVIC_SetPriority>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff35 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ffa2 	bl	8001c64 <SysTick_Config>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b08b      	sub	sp, #44	; 0x2c
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3e:	e148      	b.n	8001fd2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8137 	bne.w	8001fcc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4aa3      	ldr	r2, [pc, #652]	; (8001ff0 <HAL_GPIO_Init+0x2c4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d05e      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d68:	4aa1      	ldr	r2, [pc, #644]	; (8001ff0 <HAL_GPIO_Init+0x2c4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d875      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d6e:	4aa1      	ldr	r2, [pc, #644]	; (8001ff4 <HAL_GPIO_Init+0x2c8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d058      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d74:	4a9f      	ldr	r2, [pc, #636]	; (8001ff4 <HAL_GPIO_Init+0x2c8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d86f      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d7a:	4a9f      	ldr	r2, [pc, #636]	; (8001ff8 <HAL_GPIO_Init+0x2cc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d052      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d80:	4a9d      	ldr	r2, [pc, #628]	; (8001ff8 <HAL_GPIO_Init+0x2cc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d869      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d86:	4a9d      	ldr	r2, [pc, #628]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04c      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a9b      	ldr	r2, [pc, #620]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d863      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d92:	4a9b      	ldr	r2, [pc, #620]	; (8002000 <HAL_GPIO_Init+0x2d4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d046      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
 8001d98:	4a99      	ldr	r2, [pc, #612]	; (8002000 <HAL_GPIO_Init+0x2d4>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d85d      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	d82a      	bhi.n	8001df8 <HAL_GPIO_Init+0xcc>
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d859      	bhi.n	8001e5a <HAL_GPIO_Init+0x12e>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <HAL_GPIO_Init+0x80>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001e27 	.word	0x08001e27
 8001db0:	08001e01 	.word	0x08001e01
 8001db4:	08001e13 	.word	0x08001e13
 8001db8:	08001e55 	.word	0x08001e55
 8001dbc:	08001e5b 	.word	0x08001e5b
 8001dc0:	08001e5b 	.word	0x08001e5b
 8001dc4:	08001e5b 	.word	0x08001e5b
 8001dc8:	08001e5b 	.word	0x08001e5b
 8001dcc:	08001e5b 	.word	0x08001e5b
 8001dd0:	08001e5b 	.word	0x08001e5b
 8001dd4:	08001e5b 	.word	0x08001e5b
 8001dd8:	08001e5b 	.word	0x08001e5b
 8001ddc:	08001e5b 	.word	0x08001e5b
 8001de0:	08001e5b 	.word	0x08001e5b
 8001de4:	08001e5b 	.word	0x08001e5b
 8001de8:	08001e5b 	.word	0x08001e5b
 8001dec:	08001e5b 	.word	0x08001e5b
 8001df0:	08001e09 	.word	0x08001e09
 8001df4:	08001e1d 	.word	0x08001e1d
 8001df8:	4a82      	ldr	r2, [pc, #520]	; (8002004 <HAL_GPIO_Init+0x2d8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dfe:	e02c      	b.n	8001e5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e029      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e024      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	3308      	adds	r3, #8
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e01f      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	330c      	adds	r3, #12
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e01a      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e2e:	2304      	movs	r3, #4
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e013      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	611a      	str	r2, [r3, #16]
          break;
 8001e46:	e009      	b.n	8001e5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	615a      	str	r2, [r3, #20]
          break;
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
          break;
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x130>
          break;
 8001e5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d801      	bhi.n	8001e66 <HAL_GPIO_Init+0x13a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	e001      	b.n	8001e6a <HAL_GPIO_Init+0x13e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d802      	bhi.n	8001e78 <HAL_GPIO_Init+0x14c>
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x152>
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3b08      	subs	r3, #8
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	210f      	movs	r1, #15
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	401a      	ands	r2, r3
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8090 	beq.w	8001fcc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eac:	4b56      	ldr	r3, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2dc>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a55      	ldr	r2, [pc, #340]	; (8002008 <HAL_GPIO_Init+0x2dc>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_GPIO_Init+0x2dc>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_GPIO_Init+0x2e0>)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3302      	adds	r3, #2
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	220f      	movs	r2, #15
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2e4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1e0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1dc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_GPIO_Init+0x2ec>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1d8>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e004      	b.n	8001f0e <HAL_GPIO_Init+0x1e2>
 8001f04:	2303      	movs	r3, #3
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x1e2>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_GPIO_Init+0x1e2>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f10:	f002 0203 	and.w	r2, r2, #3
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4093      	lsls	r3, r2
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1e:	493b      	ldr	r1, [pc, #236]	; (800200c <HAL_GPIO_Init+0x2e0>)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f38:	4b38      	ldr	r3, [pc, #224]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4937      	ldr	r1, [pc, #220]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f46:	4b35      	ldr	r3, [pc, #212]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4933      	ldr	r1, [pc, #204]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f60:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	492d      	ldr	r1, [pc, #180]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6e:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4929      	ldr	r1, [pc, #164]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4923      	ldr	r1, [pc, #140]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	491f      	ldr	r1, [pc, #124]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d006      	beq.n	8001fbe <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4919      	ldr	r1, [pc, #100]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4915      	ldr	r1, [pc, #84]	; (800201c <HAL_GPIO_Init+0x2f0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	3301      	adds	r3, #1
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f47f aeaf 	bne.w	8001d40 <HAL_GPIO_Init+0x14>
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	bf00      	nop
 8001fe6:	372c      	adds	r7, #44	; 0x2c
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	10320000 	.word	0x10320000
 8001ff4:	10310000 	.word	0x10310000
 8001ff8:	10220000 	.word	0x10220000
 8001ffc:	10210000 	.word	0x10210000
 8002000:	10120000 	.word	0x10120000
 8002004:	10110000 	.word	0x10110000
 8002008:	40021000 	.word	0x40021000
 800200c:	40010000 	.word	0x40010000
 8002010:	40010800 	.word	0x40010800
 8002014:	40010c00 	.word	0x40010c00
 8002018:	40011000 	.word	0x40011000
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
 800205a:	4613      	mov	r3, r2
 800205c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205e:	787b      	ldrb	r3, [r7, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206a:	e003      	b.n	8002074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43d9      	mvns	r1, r3
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	400b      	ands	r3, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e26c      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020dc:	4b8f      	ldr	r3, [pc, #572]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d112      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
 80020e8:	4b8c      	ldr	r3, [pc, #560]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	4b89      	ldr	r3, [pc, #548]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06c      	beq.n	80021dc <HAL_RCC_OscConfig+0x12c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d168      	bne.n	80021dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e246      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x76>
 8002118:	4b80      	ldr	r3, [pc, #512]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7f      	ldr	r2, [pc, #508]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e02e      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7a      	ldr	r2, [pc, #488]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a77      	ldr	r2, [pc, #476]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0xbc>
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a71      	ldr	r2, [pc, #452]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 800216c:	4b6b      	ldr	r3, [pc, #428]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6a      	ldr	r2, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b68      	ldr	r3, [pc, #416]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a67      	ldr	r2, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fcb6 	bl	8001afc <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fcb2 	bl	8001afc <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1fa      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xe4>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fca2 	bl	8001afc <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fc9e 	bl	8001afc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1e6      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x10c>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f6:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1ba      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4939      	ldr	r1, [pc, #228]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e03a      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7ff fc57 	bl	8001afc <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7ff fc53 	bl	8001afc <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e19b      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4927      	ldr	r1, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fc36 	bl	8001afc <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff fc32 	bl	8001afc <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e17a      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03a      	beq.n	8002334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fc16 	bl	8001afc <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7ff fc12 	bl	8001afc <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e15a      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 fa9a 	bl	800282c <RCC_Delay>
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7ff fbfc 	bl	8001afc <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002306:	e00f      	b.n	8002328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fbf8 	bl	8001afc <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d908      	bls.n	8002328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e140      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	42420000 	.word	0x42420000
 8002324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b9e      	ldr	r3, [pc, #632]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e9      	bne.n	8002308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a6 	beq.w	800248e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b97      	ldr	r3, [pc, #604]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b94      	ldr	r3, [pc, #592]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a93      	ldr	r2, [pc, #588]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b8e      	ldr	r3, [pc, #568]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7ff fbb9 	bl	8001afc <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7ff fbb5 	bl	8001afc <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	; 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0fd      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <HAL_RCC_OscConfig+0x4f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x312>
 80023b4:	4b7b      	ldr	r3, [pc, #492]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a7a      	ldr	r2, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e02d      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x334>
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	4b73      	ldr	r3, [pc, #460]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a72      	ldr	r2, [pc, #456]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	e01c      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x356>
 80023ec:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a6c      	ldr	r2, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a69      	ldr	r2, [pc, #420]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a66      	ldr	r2, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7ff fb69 	bl	8001afc <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7ff fb65 	bl	8001afc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0ab      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCC_OscConfig+0x37e>
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7ff fb53 	bl	8001afc <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7ff fb4f 	bl	8001afc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e095      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	4b4c      	ldr	r3, [pc, #304]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b48      	ldr	r3, [pc, #288]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8081 	beq.w	800259a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d061      	beq.n	8002568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d146      	bne.n	800253a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_OscConfig+0x4fc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff fb23 	bl	8001afc <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff fb1f 	bl	8001afc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e067      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d108      	bne.n	80024f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e2:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	492d      	ldr	r1, [pc, #180]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a19      	ldr	r1, [r3, #32]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	430b      	orrs	r3, r1
 8002506:	4927      	ldr	r1, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x4fc>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7ff faf3 	bl	8001afc <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7ff faef 	bl	8001afc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e037      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x46a>
 8002538:	e02f      	b.n	800259a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_RCC_OscConfig+0x4fc>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fadc 	bl	8001afc <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7ff fad8 	bl	8001afc <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e020      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x498>
 8002566:	e018      	b.n	800259a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e013      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	429a      	cmp	r2, r3
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42420060 	.word	0x42420060

080025b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0d0      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4965      	ldr	r1, [pc, #404]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002616:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800262e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d040      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e073      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4936      	ldr	r1, [pc, #216]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a0:	f7ff fa2c 	bl	8001afc <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7ff fa28 	bl	8001afc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e053      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d210      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4922      	ldr	r1, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	490a      	ldr	r1, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1c8>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1cc>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff f98a 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000
 8002774:	40021000 	.word	0x40021000
 8002778:	080030a8 	.word	0x080030a8
 800277c:	2000004c 	.word	0x2000004c
 8002780:	20000050 	.word	0x20000050

08002784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x36>
 80027b2:	e027      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	613b      	str	r3, [r7, #16]
      break;
 80027b8:	e027      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4a17      	ldr	r2, [pc, #92]	; (8002820 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027c4:	5cd3      	ldrb	r3, [r2, r3]
 80027c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0c5b      	lsrs	r3, r3, #17
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_RCC_GetSysClockFreq+0x98>)
 80027e6:	fb02 f203 	mul.w	r2, r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e004      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	613b      	str	r3, [r7, #16]
      break;
 8002802:	e002      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	613b      	str	r3, [r7, #16]
      break;
 8002808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280a:	693b      	ldr	r3, [r7, #16]
}
 800280c:	4618      	mov	r0, r3
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	007a1200 	.word	0x007a1200
 8002820:	080030b8 	.word	0x080030b8
 8002824:	080030c8 	.word	0x080030c8
 8002828:	003d0900 	.word	0x003d0900

0800282c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <RCC_Delay+0x34>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <RCC_Delay+0x38>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0a5b      	lsrs	r3, r3, #9
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002848:	bf00      	nop
  }
  while (Delay --);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1e5a      	subs	r2, r3, #1
 800284e:	60fa      	str	r2, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f9      	bne.n	8002848 <RCC_Delay+0x1c>
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	2000004c 	.word	0x2000004c
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e041      	b.n	80028fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff f848 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 fa6e 	bl	8002d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d001      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e035      	b.n	800298c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_TIM_Base_Start_IT+0x90>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x4e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d004      	beq.n	8002956 <HAL_TIM_Base_Start_IT+0x4e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_TIM_Base_Start_IT+0x94>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d111      	bne.n	800297a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b06      	cmp	r3, #6
 8002966:	d010      	beq.n	800298a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002978:	e007      	b.n	800298a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40000400 	.word	0x40000400

080029a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0202 	mvn.w	r2, #2
 80029cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9b4 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f9a7 	bl	8002d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f9b6 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d122      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0204 	mvn.w	r2, #4
 8002a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f98a 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f97d 	bl	8002d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f98c 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d122      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d11b      	bne.n	8002aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0208 	mvn.w	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f960 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f953 	bl	8002d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f962 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0210 	mvn.w	r2, #16
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2208      	movs	r2, #8
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f936 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f929 	bl	8002d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f938 	bl	8002d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0201 	mvn.w	r2, #1
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe ff5c 	bl	80019dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b80      	cmp	r3, #128	; 0x80
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa6b 	bl	8003026 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d107      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8fc 	bl	8002d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d107      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0220 	mvn.w	r2, #32
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa36 	bl	8003014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_TIM_ConfigClockSource+0x1c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0b4      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x186>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c04:	d03e      	beq.n	8002c84 <HAL_TIM_ConfigClockSource+0xd4>
 8002c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0a:	f200 8087 	bhi.w	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	f000 8086 	beq.w	8002d22 <HAL_TIM_ConfigClockSource+0x172>
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1a:	d87f      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b70      	cmp	r3, #112	; 0x70
 8002c1e:	d01a      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0xa6>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d87b      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b60      	cmp	r3, #96	; 0x60
 8002c26:	d050      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x11a>
 8002c28:	2b60      	cmp	r3, #96	; 0x60
 8002c2a:	d877      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b50      	cmp	r3, #80	; 0x50
 8002c2e:	d03c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xfa>
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d873      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d058      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x13a>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d86f      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c3c:	2b30      	cmp	r3, #48	; 0x30
 8002c3e:	d064      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d86b      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d060      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d867      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05c      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d05a      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	e062      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f000 f95e 	bl	8002f26 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]
      break;
 8002c82:	e04f      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6899      	ldr	r1, [r3, #8]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f000 f947 	bl	8002f26 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca6:	609a      	str	r2, [r3, #8]
      break;
 8002ca8:	e03c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f000 f8be 	bl	8002e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2150      	movs	r1, #80	; 0x50
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 f915 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002cc8:	e02c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f000 f8dc 	bl	8002e94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2160      	movs	r1, #96	; 0x60
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f905 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e01c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f000 f89e 	bl	8002e38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f8f5 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002d08:	e00c      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f000 f8ec 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 8002d1a:	e003      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e000      	b.n	8002d24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
	...

08002d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a25      	ldr	r2, [pc, #148]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <TIM_Base_SetConfig+0x28>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d003      	beq.n	8002db0 <TIM_Base_SetConfig+0x28>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <TIM_Base_SetConfig+0xac>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <TIM_Base_SetConfig+0x52>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x52>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <TIM_Base_SetConfig+0xac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <TIM_Base_SetConfig+0xa8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400

08002e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 030a 	bic.w	r3, r3, #10
 8002e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f023 0210 	bic.w	r2, r3, #16
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	031b      	lsls	r3, r3, #12
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	621a      	str	r2, [r3, #32]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f043 0307 	orr.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b087      	sub	sp, #28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	021a      	lsls	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	609a      	str	r2, [r3, #8]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e041      	b.n	8003000 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10c      	bne.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400

08003014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	2600      	movs	r6, #0
 800303c:	4d0c      	ldr	r5, [pc, #48]	; (8003070 <__libc_init_array+0x38>)
 800303e:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 8003040:	1b64      	subs	r4, r4, r5
 8003042:	10a4      	asrs	r4, r4, #2
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	f000 f822 	bl	8003090 <_init>
 800304c:	2600      	movs	r6, #0
 800304e:	4d0a      	ldr	r5, [pc, #40]	; (8003078 <__libc_init_array+0x40>)
 8003050:	4c0a      	ldr	r4, [pc, #40]	; (800307c <__libc_init_array+0x44>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	080030cc 	.word	0x080030cc
 8003074:	080030cc 	.word	0x080030cc
 8003078:	080030cc 	.word	0x080030cc
 800307c:	080030d0 	.word	0x080030d0

08003080 <memset>:
 8003080:	4603      	mov	r3, r0
 8003082:	4402      	add	r2, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	f803 1b01 	strb.w	r1, [r3], #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
